// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/model/eic/eic.proto

package eic

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RandVar_Distribution int32

const (
	RandVar_NORMAL  RandVar_Distribution = 0
	RandVar_UNIFORM RandVar_Distribution = 1
)

var RandVar_Distribution_name = map[int32]string{
	0: "NORMAL",
	1: "UNIFORM",
}

var RandVar_Distribution_value = map[string]int32{
	"NORMAL":  0,
	"UNIFORM": 1,
}

func (x RandVar_Distribution) Enum() *RandVar_Distribution {
	p := new(RandVar_Distribution)
	*p = x
	return p
}

func (x RandVar_Distribution) String() string {
	return proto.EnumName(RandVar_Distribution_name, int32(x))
}

func (x *RandVar_Distribution) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RandVar_Distribution_value, data, "RandVar_Distribution")
	if err != nil {
		return err
	}
	*x = RandVar_Distribution(value)
	return nil
}

func (RandVar_Distribution) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{8, 0}
}

type Particle struct {
	// ProIO entry identifiers that point to parent Particles
	Parent []uint64 `protobuf:"varint,1,rep,packed,name=parent" json:"parent,omitempty"`
	// ProIO entry identifiers that point to child Particles
	Child []uint64 `protobuf:"varint,2,rep,packed,name=child" json:"child,omitempty"`
	// PDG code
	Pdg *int32 `protobuf:"zigzag32,3,opt,name=pdg" json:"pdg,omitempty"`
	// position in mm and time in ns
	Vertex *XYZTD `protobuf:"bytes,4,opt,name=vertex" json:"vertex,omitempty"`
	// momentum in GeV
	P *XYZF `protobuf:"bytes,9,opt,name=p" json:"p,omitempty"`
	// mass in GeV
	Mass *float32 `protobuf:"fixed32,10,opt,name=mass" json:"mass,omitempty"`
	// charge in units of e
	Charge *float32 `protobuf:"fixed32,7,opt,name=charge" json:"charge,omitempty"`
	Spin   *XYZF    `protobuf:"bytes,8,opt,name=spin" json:"spin,omitempty"`
	// DEPRECATED
	PDouble              *XYZD    `protobuf:"bytes,5,opt,name=p_double,json=pDouble" json:"p_double,omitempty"`
	MassDouble           *float64 `protobuf:"fixed64,6,opt,name=mass_double,json=massDouble" json:"mass_double,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Particle) Reset()         { *m = Particle{} }
func (m *Particle) String() string { return proto.CompactTextString(m) }
func (*Particle) ProtoMessage()    {}
func (*Particle) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{0}
}
func (m *Particle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Particle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Particle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Particle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Particle.Merge(m, src)
}
func (m *Particle) XXX_Size() int {
	return m.Size()
}
func (m *Particle) XXX_DiscardUnknown() {
	xxx_messageInfo_Particle.DiscardUnknown(m)
}

var xxx_messageInfo_Particle proto.InternalMessageInfo

func (m *Particle) GetParent() []uint64 {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Particle) GetChild() []uint64 {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *Particle) GetPdg() int32 {
	if m != nil && m.Pdg != nil {
		return *m.Pdg
	}
	return 0
}

func (m *Particle) GetVertex() *XYZTD {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *Particle) GetP() *XYZF {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Particle) GetMass() float32 {
	if m != nil && m.Mass != nil {
		return *m.Mass
	}
	return 0
}

func (m *Particle) GetCharge() float32 {
	if m != nil && m.Charge != nil {
		return *m.Charge
	}
	return 0
}

func (m *Particle) GetSpin() *XYZF {
	if m != nil {
		return m.Spin
	}
	return nil
}

func (m *Particle) GetPDouble() *XYZD {
	if m != nil {
		return m.PDouble
	}
	return nil
}

func (m *Particle) GetMassDouble() float64 {
	if m != nil && m.MassDouble != nil {
		return *m.MassDouble
	}
	return 0
}

type SimHit struct {
	// optional ID to circumvent volume lookup from global position during
	// digitization
	Volumeid *uint64 `protobuf:"varint,1,opt,name=volumeid" json:"volumeid,omitempty"`
	// spatial in mm and time in ns
	Globalprepos *XYZTD `protobuf:"bytes,2,opt,name=globalprepos" json:"globalprepos,omitempty"`
	// spatial in mm and time in ns
	Globalpostpos *XYZTD `protobuf:"bytes,3,opt,name=globalpostpos" json:"globalpostpos,omitempty"`
	// energy in GeV
	Edep *float32 `protobuf:"fixed32,4,opt,name=edep" json:"edep,omitempty"`
	// "particle" is a ProIO entry identifier that points to the Particle
	// responsible for this hit.
	Particle             *uint64  `protobuf:"varint,5,opt,name=particle" json:"particle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimHit) Reset()         { *m = SimHit{} }
func (m *SimHit) String() string { return proto.CompactTextString(m) }
func (*SimHit) ProtoMessage()    {}
func (*SimHit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{1}
}
func (m *SimHit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimHit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimHit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimHit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimHit.Merge(m, src)
}
func (m *SimHit) XXX_Size() int {
	return m.Size()
}
func (m *SimHit) XXX_DiscardUnknown() {
	xxx_messageInfo_SimHit.DiscardUnknown(m)
}

var xxx_messageInfo_SimHit proto.InternalMessageInfo

func (m *SimHit) GetVolumeid() uint64 {
	if m != nil && m.Volumeid != nil {
		return *m.Volumeid
	}
	return 0
}

func (m *SimHit) GetGlobalprepos() *XYZTD {
	if m != nil {
		return m.Globalprepos
	}
	return nil
}

func (m *SimHit) GetGlobalpostpos() *XYZTD {
	if m != nil {
		return m.Globalpostpos
	}
	return nil
}

func (m *SimHit) GetEdep() float32 {
	if m != nil && m.Edep != nil {
		return *m.Edep
	}
	return 0
}

func (m *SimHit) GetParticle() uint64 {
	if m != nil && m.Particle != nil {
		return *m.Particle
	}
	return 0
}

type EnergyDep struct {
	// mean and noise are in units of GeV
	Mean *float32 `protobuf:"fixed32,1,opt,name=mean" json:"mean,omitempty"`
	// sigma value for normally-distributed noise
	Noise *float32 `protobuf:"fixed32,2,opt,name=noise" json:"noise,omitempty"`
	// Multiple possible positions can be specified.
	Pos []*ObservedPos `protobuf:"bytes,3,rep,name=pos" json:"pos,omitempty"`
	// "source"s are ProIO entry identifiers that may point to SimHits,
	// Particles, or specialized raw data objects.
	Source               []uint64 `protobuf:"varint,4,rep,packed,name=source" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnergyDep) Reset()         { *m = EnergyDep{} }
func (m *EnergyDep) String() string { return proto.CompactTextString(m) }
func (*EnergyDep) ProtoMessage()    {}
func (*EnergyDep) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{2}
}
func (m *EnergyDep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnergyDep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnergyDep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnergyDep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnergyDep.Merge(m, src)
}
func (m *EnergyDep) XXX_Size() int {
	return m.Size()
}
func (m *EnergyDep) XXX_DiscardUnknown() {
	xxx_messageInfo_EnergyDep.DiscardUnknown(m)
}

var xxx_messageInfo_EnergyDep proto.InternalMessageInfo

func (m *EnergyDep) GetMean() float32 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *EnergyDep) GetNoise() float32 {
	if m != nil && m.Noise != nil {
		return *m.Noise
	}
	return 0
}

func (m *EnergyDep) GetPos() []*ObservedPos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *EnergyDep) GetSource() []uint64 {
	if m != nil {
		return m.Source
	}
	return nil
}

// symmetric kernel (or similarity) matrix between observations - This is used
// as input to Kalman filtering and other clustering techniques.
type KernelMatrix struct {
	// ordered list of observation ids that maps matrix indices to observations
	Observation []uint64 `protobuf:"varint,1,rep,packed,name=observation" json:"observation,omitempty"`
	// flattened upper-triangular components of matrix - If the observation
	// field has length n, the kflat field must have length (n+1)*n/2.  The
	// flattening procedure must go row-by-row from the top to bottom (low row
	// index to high row index), omitting lower, off-diagonal components.
	Kflat                []float32 `protobuf:"fixed32,2,rep,packed,name=kflat" json:"kflat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *KernelMatrix) Reset()         { *m = KernelMatrix{} }
func (m *KernelMatrix) String() string { return proto.CompactTextString(m) }
func (*KernelMatrix) ProtoMessage()    {}
func (*KernelMatrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{3}
}
func (m *KernelMatrix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KernelMatrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KernelMatrix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KernelMatrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelMatrix.Merge(m, src)
}
func (m *KernelMatrix) XXX_Size() int {
	return m.Size()
}
func (m *KernelMatrix) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelMatrix.DiscardUnknown(m)
}

var xxx_messageInfo_KernelMatrix proto.InternalMessageInfo

func (m *KernelMatrix) GetObservation() []uint64 {
	if m != nil {
		return m.Observation
	}
	return nil
}

func (m *KernelMatrix) GetKflat() []float32 {
	if m != nil {
		return m.Kflat
	}
	return nil
}

type Track struct {
	Segment              []*TrackSegment `protobuf:"bytes,1,rep,name=segment" json:"segment,omitempty"`
	Observation          []uint64        `protobuf:"varint,2,rep,packed,name=observation" json:"observation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{4}
}
func (m *Track) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Track.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return m.Size()
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetSegment() []*TrackSegment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *Track) GetObservation() []uint64 {
	if m != nil {
		return m.Observation
	}
	return nil
}

type CaloShower struct {
	// the origin, or starting point of the particle shower in spacetime -
	// Multiple origins may be specified if there is an ambiguity.
	Origin []*ObservedPos `protobuf:"bytes,1,rep,name=origin" json:"origin,omitempty"`
	// list of EnergyDeps that were determined to be a part of this shower
	Observation          []uint64                         `protobuf:"varint,2,rep,packed,name=observation" json:"observation,omitempty"`
	Hypothesis           []*CaloShower_ParticleHypothesis `protobuf:"bytes,3,rep,name=hypothesis" json:"hypothesis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CaloShower) Reset()         { *m = CaloShower{} }
func (m *CaloShower) String() string { return proto.CompactTextString(m) }
func (*CaloShower) ProtoMessage()    {}
func (*CaloShower) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{5}
}
func (m *CaloShower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CaloShower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CaloShower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CaloShower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaloShower.Merge(m, src)
}
func (m *CaloShower) XXX_Size() int {
	return m.Size()
}
func (m *CaloShower) XXX_DiscardUnknown() {
	xxx_messageInfo_CaloShower.DiscardUnknown(m)
}

var xxx_messageInfo_CaloShower proto.InternalMessageInfo

func (m *CaloShower) GetOrigin() []*ObservedPos {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CaloShower) GetObservation() []uint64 {
	if m != nil {
		return m.Observation
	}
	return nil
}

func (m *CaloShower) GetHypothesis() []*CaloShower_ParticleHypothesis {
	if m != nil {
		return m.Hypothesis
	}
	return nil
}

type CaloShower_ParticleHypothesis struct {
	// PDG code
	Pdg *int32 `protobuf:"zigzag32,1,opt,name=pdg" json:"pdg,omitempty"`
	// estimated energy deposition in GeV for this hypothesis
	Edep *float32 `protobuf:"fixed32,2,opt,name=edep" json:"edep,omitempty"`
	// "weightmod" describes additional weight to be applied to this
	// particle hypothesis.  For the case of multiple hypotheses, it is
	// implied that by default each is equally likely.  This can be changed
	// by adding weight modifiers.  To indicate that one hypothesis is
	// twice as likely as one without a weight modifier, set weightmod to
	// +1.  Alternatively, one may normalize the weights by setting
	// weightmod equal to p-1, where p is the probability of that
	// hypothesis.
	Weightmod            *float32 `protobuf:"fixed32,3,opt,name=weightmod" json:"weightmod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CaloShower_ParticleHypothesis) Reset()         { *m = CaloShower_ParticleHypothesis{} }
func (m *CaloShower_ParticleHypothesis) String() string { return proto.CompactTextString(m) }
func (*CaloShower_ParticleHypothesis) ProtoMessage()    {}
func (*CaloShower_ParticleHypothesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{5, 0}
}
func (m *CaloShower_ParticleHypothesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CaloShower_ParticleHypothesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CaloShower_ParticleHypothesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CaloShower_ParticleHypothesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaloShower_ParticleHypothesis.Merge(m, src)
}
func (m *CaloShower_ParticleHypothesis) XXX_Size() int {
	return m.Size()
}
func (m *CaloShower_ParticleHypothesis) XXX_DiscardUnknown() {
	xxx_messageInfo_CaloShower_ParticleHypothesis.DiscardUnknown(m)
}

var xxx_messageInfo_CaloShower_ParticleHypothesis proto.InternalMessageInfo

func (m *CaloShower_ParticleHypothesis) GetPdg() int32 {
	if m != nil && m.Pdg != nil {
		return *m.Pdg
	}
	return 0
}

func (m *CaloShower_ParticleHypothesis) GetEdep() float32 {
	if m != nil && m.Edep != nil {
		return *m.Edep
	}
	return 0
}

func (m *CaloShower_ParticleHypothesis) GetWeightmod() float32 {
	if m != nil && m.Weightmod != nil {
		return *m.Weightmod
	}
	return 0
}

type TrackSegment struct {
	// start of segment in mm/ns
	Vertex      *XYZTD     `protobuf:"bytes,1,opt,name=vertex" json:"vertex,omitempty"`
	Vertexnoise []*RandVar `protobuf:"bytes,2,rep,name=vertexnoise" json:"vertexnoise,omitempty"`
	// momentum normalized to the magnitude of the charge (GeV)
	Poq      *XYZD      `protobuf:"bytes,3,opt,name=poq" json:"poq,omitempty"`
	Poqnoise []*RandVar `protobuf:"bytes,4,rep,name=poqnoise" json:"poqnoise,omitempty"`
	// magnetic field at the vertex (T)
	Magfield *XYZD `protobuf:"bytes,9,opt,name=magfield" json:"magfield,omitempty"`
	// sign of the track charge
	Chargesign *float32 `protobuf:"fixed32,7,opt,name=chargesign" json:"chargesign,omitempty"`
	// length of the segment in mm
	Length *float32 `protobuf:"fixed32,8,opt,name=length" json:"length,omitempty"`
	// DEPRECATED
	Curvature            *XYZD      `protobuf:"bytes,5,opt,name=curvature" json:"curvature,omitempty"`
	Curvaturenoise       []*RandVar `protobuf:"bytes,6,rep,name=curvaturenoise" json:"curvaturenoise,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TrackSegment) Reset()         { *m = TrackSegment{} }
func (m *TrackSegment) String() string { return proto.CompactTextString(m) }
func (*TrackSegment) ProtoMessage()    {}
func (*TrackSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{6}
}
func (m *TrackSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackSegment.Merge(m, src)
}
func (m *TrackSegment) XXX_Size() int {
	return m.Size()
}
func (m *TrackSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackSegment.DiscardUnknown(m)
}

var xxx_messageInfo_TrackSegment proto.InternalMessageInfo

func (m *TrackSegment) GetVertex() *XYZTD {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *TrackSegment) GetVertexnoise() []*RandVar {
	if m != nil {
		return m.Vertexnoise
	}
	return nil
}

func (m *TrackSegment) GetPoq() *XYZD {
	if m != nil {
		return m.Poq
	}
	return nil
}

func (m *TrackSegment) GetPoqnoise() []*RandVar {
	if m != nil {
		return m.Poqnoise
	}
	return nil
}

func (m *TrackSegment) GetMagfield() *XYZD {
	if m != nil {
		return m.Magfield
	}
	return nil
}

func (m *TrackSegment) GetChargesign() float32 {
	if m != nil && m.Chargesign != nil {
		return *m.Chargesign
	}
	return 0
}

func (m *TrackSegment) GetLength() float32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *TrackSegment) GetCurvature() *XYZD {
	if m != nil {
		return m.Curvature
	}
	return nil
}

func (m *TrackSegment) GetCurvaturenoise() []*RandVar {
	if m != nil {
		return m.Curvaturenoise
	}
	return nil
}

// position with detailed noise
type ObservedPos struct {
	// spatial in mm and time in ns
	Mean *XYZTD `protobuf:"bytes,1,opt,name=mean" json:"mean,omitempty"`
	// These RandVars describe independent random noise contributions, and
	// repeated RandVars imply addition, or alternatively a convolution of
	// their distributions.  The contributions must combine to span the full
	// 4-dimensional space, so the number of contributions must be >= 4.
	Noise []*RandVar `protobuf:"bytes,2,rep,name=noise" json:"noise,omitempty"`
	// "weightmod" describes additional weight to be applied to this position.
	// For the case of multiple possible positions, it is implied that by
	// default each position is equally likely.  This can be changed by adding
	// weight to positions.  To make one position twice as likely as a position
	// without a weight modifier, set weightmod to +1.
	Weightmod            *float32 `protobuf:"fixed32,3,opt,name=weightmod" json:"weightmod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservedPos) Reset()         { *m = ObservedPos{} }
func (m *ObservedPos) String() string { return proto.CompactTextString(m) }
func (*ObservedPos) ProtoMessage()    {}
func (*ObservedPos) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{7}
}
func (m *ObservedPos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservedPos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservedPos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObservedPos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservedPos.Merge(m, src)
}
func (m *ObservedPos) XXX_Size() int {
	return m.Size()
}
func (m *ObservedPos) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservedPos.DiscardUnknown(m)
}

var xxx_messageInfo_ObservedPos proto.InternalMessageInfo

func (m *ObservedPos) GetMean() *XYZTD {
	if m != nil {
		return m.Mean
	}
	return nil
}

func (m *ObservedPos) GetNoise() []*RandVar {
	if m != nil {
		return m.Noise
	}
	return nil
}

func (m *ObservedPos) GetWeightmod() float32 {
	if m != nil && m.Weightmod != nil {
		return *m.Weightmod
	}
	return 0
}

// random variable with a specified distribution along an axis defined in XYZT
type RandVar struct {
	Dist *RandVar_Distribution `protobuf:"varint,2,opt,name=dist,enum=proio.model.eic.RandVar_Distribution" json:"dist,omitempty"`
	// spatial in mm and time in ns
	Sigma                *XYZTF   `protobuf:"bytes,3,opt,name=sigma" json:"sigma,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RandVar) Reset()         { *m = RandVar{} }
func (m *RandVar) String() string { return proto.CompactTextString(m) }
func (*RandVar) ProtoMessage()    {}
func (*RandVar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{8}
}
func (m *RandVar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandVar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandVar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandVar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandVar.Merge(m, src)
}
func (m *RandVar) XXX_Size() int {
	return m.Size()
}
func (m *RandVar) XXX_DiscardUnknown() {
	xxx_messageInfo_RandVar.DiscardUnknown(m)
}

var xxx_messageInfo_RandVar proto.InternalMessageInfo

func (m *RandVar) GetDist() RandVar_Distribution {
	if m != nil && m.Dist != nil {
		return *m.Dist
	}
	return RandVar_NORMAL
}

func (m *RandVar) GetSigma() *XYZTF {
	if m != nil {
		return m.Sigma
	}
	return nil
}

type XYZTD struct {
	X                    *float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y                    *float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
	Z                    *float64 `protobuf:"fixed64,3,opt,name=z" json:"z,omitempty"`
	T                    *float64 `protobuf:"fixed64,4,opt,name=t" json:"t,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZTD) Reset()         { *m = XYZTD{} }
func (m *XYZTD) String() string { return proto.CompactTextString(m) }
func (*XYZTD) ProtoMessage()    {}
func (*XYZTD) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{9}
}
func (m *XYZTD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZTD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZTD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZTD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZTD.Merge(m, src)
}
func (m *XYZTD) XXX_Size() int {
	return m.Size()
}
func (m *XYZTD) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZTD.DiscardUnknown(m)
}

var xxx_messageInfo_XYZTD proto.InternalMessageInfo

func (m *XYZTD) GetX() float64 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZTD) GetY() float64 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZTD) GetZ() float64 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func (m *XYZTD) GetT() float64 {
	if m != nil && m.T != nil {
		return *m.T
	}
	return 0
}

type XYZTF struct {
	X                    *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z                    *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	T                    *float32 `protobuf:"fixed32,4,opt,name=t" json:"t,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZTF) Reset()         { *m = XYZTF{} }
func (m *XYZTF) String() string { return proto.CompactTextString(m) }
func (*XYZTF) ProtoMessage()    {}
func (*XYZTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{10}
}
func (m *XYZTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZTF.Merge(m, src)
}
func (m *XYZTF) XXX_Size() int {
	return m.Size()
}
func (m *XYZTF) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZTF.DiscardUnknown(m)
}

var xxx_messageInfo_XYZTF proto.InternalMessageInfo

func (m *XYZTF) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZTF) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZTF) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func (m *XYZTF) GetT() float32 {
	if m != nil && m.T != nil {
		return *m.T
	}
	return 0
}

type XYZD struct {
	X                    *float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y                    *float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
	Z                    *float64 `protobuf:"fixed64,3,opt,name=z" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZD) Reset()         { *m = XYZD{} }
func (m *XYZD) String() string { return proto.CompactTextString(m) }
func (*XYZD) ProtoMessage()    {}
func (*XYZD) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{11}
}
func (m *XYZD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZD.Merge(m, src)
}
func (m *XYZD) XXX_Size() int {
	return m.Size()
}
func (m *XYZD) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZD.DiscardUnknown(m)
}

var xxx_messageInfo_XYZD proto.InternalMessageInfo

func (m *XYZD) GetX() float64 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZD) GetY() float64 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZD) GetZ() float64 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

type XYZF struct {
	X                    *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z                    *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZF) Reset()         { *m = XYZF{} }
func (m *XYZF) String() string { return proto.CompactTextString(m) }
func (*XYZF) ProtoMessage()    {}
func (*XYZF) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1620427b20c8703, []int{12}
}
func (m *XYZF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZF.Merge(m, src)
}
func (m *XYZF) XXX_Size() int {
	return m.Size()
}
func (m *XYZF) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZF.DiscardUnknown(m)
}

var xxx_messageInfo_XYZF proto.InternalMessageInfo

func (m *XYZF) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZF) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZF) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func init() {
	proto.RegisterEnum("proio.model.eic.RandVar_Distribution", RandVar_Distribution_name, RandVar_Distribution_value)
	proto.RegisterType((*Particle)(nil), "proio.model.eic.Particle")
	proto.RegisterType((*SimHit)(nil), "proio.model.eic.SimHit")
	proto.RegisterType((*EnergyDep)(nil), "proio.model.eic.EnergyDep")
	proto.RegisterType((*KernelMatrix)(nil), "proio.model.eic.KernelMatrix")
	proto.RegisterType((*Track)(nil), "proio.model.eic.Track")
	proto.RegisterType((*CaloShower)(nil), "proio.model.eic.CaloShower")
	proto.RegisterType((*CaloShower_ParticleHypothesis)(nil), "proio.model.eic.CaloShower.ParticleHypothesis")
	proto.RegisterType((*TrackSegment)(nil), "proio.model.eic.TrackSegment")
	proto.RegisterType((*ObservedPos)(nil), "proio.model.eic.ObservedPos")
	proto.RegisterType((*RandVar)(nil), "proio.model.eic.RandVar")
	proto.RegisterType((*XYZTD)(nil), "proio.model.eic.XYZTD")
	proto.RegisterType((*XYZTF)(nil), "proio.model.eic.XYZTF")
	proto.RegisterType((*XYZD)(nil), "proio.model.eic.XYZD")
	proto.RegisterType((*XYZF)(nil), "proio.model.eic.XYZF")
}

func init() { proto.RegisterFile("proio/model/eic/eic.proto", fileDescriptor_d1620427b20c8703) }

var fileDescriptor_d1620427b20c8703 = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0xee, 0x8c, 0xbd, 0x3f, 0x39, 0x5e, 0x4a, 0x38, 0x82, 0xca, 0x44, 0x65, 0x59, 0x19, 0x50,
	0x16, 0x84, 0xdc, 0x12, 0x2a, 0x21, 0x2a, 0x24, 0x20, 0x6c, 0xa3, 0x22, 0x48, 0x52, 0x4d, 0x0a,
	0x2a, 0xbd, 0x41, 0x8e, 0x3d, 0xf1, 0x8e, 0xea, 0xf5, 0xb8, 0x63, 0x6f, 0x9a, 0xf4, 0x8e, 0x2b,
	0xee, 0xb9, 0x42, 0xe2, 0x51, 0x78, 0x01, 0xae, 0x10, 0xbc, 0x01, 0x0a, 0x2f, 0x82, 0x66, 0x6c,
	0xef, 0x7a, 0xb3, 0xc9, 0x26, 0x5c, 0x58, 0x9a, 0x73, 0xfc, 0x9d, 0x9f, 0x39, 0xf3, 0x9d, 0x0f,
	0xde, 0xcc, 0x94, 0x14, 0xf2, 0xce, 0x44, 0x46, 0x3c, 0xb9, 0xc3, 0x45, 0xa8, 0x3f, 0x3f, 0x53,
	0xb2, 0x90, 0xf8, 0xaa, 0xf9, 0xe5, 0x9b, 0x5f, 0x3e, 0x17, 0xa1, 0xf7, 0x37, 0x85, 0xee, 0xa3,
	0x40, 0x15, 0x22, 0x4c, 0x38, 0x6e, 0x40, 0x3b, 0x0b, 0x14, 0x4f, 0x0b, 0x97, 0x0c, 0xac, 0xa1,
	0xbd, 0x4d, 0xd7, 0x09, 0xab, 0x3c, 0xe8, 0x42, 0x2b, 0x1c, 0x8b, 0x24, 0x72, 0xe9, 0xec, 0x57,
	0xe9, 0xc0, 0x75, 0xb0, 0xb2, 0x28, 0x76, 0xad, 0x01, 0x19, 0xbe, 0xc6, 0xf4, 0x11, 0x7d, 0x68,
	0x1f, 0x73, 0x55, 0xf0, 0x13, 0xd7, 0x1e, 0x90, 0xa1, 0xb3, 0x75, 0xcb, 0x3f, 0x57, 0xd6, 0x7f,
	0xf2, 0xc3, 0xd3, 0xc7, 0x23, 0x56, 0xa1, 0xf0, 0x1d, 0x20, 0x99, 0xbb, 0x66, 0xa0, 0x6f, 0x5c,
	0x04, 0xdd, 0x61, 0x24, 0x43, 0x04, 0x7b, 0x12, 0xe4, 0xb9, 0x0b, 0x03, 0x32, 0xa4, 0xcc, 0x9c,
	0xf1, 0x16, 0xb4, 0xc3, 0x71, 0xa0, 0x62, 0xee, 0x76, 0x8c, 0xb7, 0xb2, 0xf0, 0x7d, 0xb0, 0xf3,
	0x4c, 0xa4, 0x6e, 0x77, 0x55, 0x4e, 0x03, 0xc1, 0xbb, 0xd0, 0xcd, 0x7e, 0x8c, 0xe4, 0xf4, 0x30,
	0xe1, 0x6e, 0xeb, 0x72, 0xf8, 0x88, 0x75, 0xb2, 0x91, 0x41, 0xe1, 0xdb, 0xe0, 0xe8, 0xe2, 0x75,
	0x50, 0x7b, 0x40, 0x86, 0x84, 0x81, 0x76, 0x95, 0x00, 0xef, 0x4f, 0x02, 0xed, 0x03, 0x31, 0x79,
	0x28, 0x0a, 0xdc, 0x80, 0xee, 0xb1, 0x4c, 0xa6, 0x13, 0x2e, 0x22, 0x97, 0x0c, 0xc8, 0xd0, 0x66,
	0x33, 0x1b, 0xef, 0x43, 0x2f, 0x4e, 0xe4, 0x61, 0x90, 0x64, 0x8a, 0x67, 0x32, 0x77, 0xe9, 0xca,
	0x59, 0x2d, 0x60, 0xf1, 0x33, 0x78, 0xa5, 0xb2, 0x65, 0x5e, 0xe8, 0x60, 0x6b, 0x65, 0xf0, 0x22,
	0x58, 0x8f, 0x92, 0x47, 0x3c, 0x33, 0xaf, 0x43, 0x99, 0x39, 0xeb, 0x4e, 0xb3, 0x8a, 0x07, 0x66,
	0x0e, 0x36, 0x9b, 0xd9, 0xde, 0x4f, 0x04, 0xd6, 0x1e, 0xa4, 0x5c, 0xc5, 0xa7, 0x23, 0x5e, 0x3e,
	0x04, 0x0f, 0x52, 0x73, 0x1f, 0xfd, 0x10, 0x3c, 0x48, 0xf1, 0x75, 0x68, 0xa5, 0x52, 0xe4, 0xdc,
	0x5c, 0x82, 0xb2, 0xd2, 0x40, 0x1f, 0xac, 0xb2, 0x37, 0x6b, 0xe8, 0x6c, 0xdd, 0x5e, 0xea, 0x6d,
	0xff, 0x30, 0xe7, 0xea, 0x98, 0x47, 0x8f, 0x64, 0xce, 0x34, 0x50, 0xf3, 0x2f, 0x97, 0x53, 0x15,
	0x72, 0xd7, 0x9e, 0xf3, 0xaf, 0xf4, 0x78, 0x7b, 0xd0, 0xfb, 0x86, 0xab, 0x94, 0x27, 0xbb, 0x41,
	0xa1, 0xc4, 0x09, 0xbe, 0x0b, 0x8e, 0x34, 0xf1, 0x41, 0x21, 0x64, 0xda, 0x20, 0x6c, 0xd3, 0xad,
	0x59, 0xfb, 0xec, 0x28, 0x09, 0x0a, 0xc3, 0x5a, 0x5a, 0xb2, 0xd6, 0x38, 0xbc, 0x23, 0x68, 0x3d,
	0x56, 0x41, 0xf8, 0x0c, 0x3f, 0x81, 0x4e, 0xce, 0xe3, 0x49, 0xcd, 0x7a, 0x67, 0xeb, 0xad, 0xa5,
	0x46, 0x0d, 0xf0, 0xa0, 0x04, 0xb1, 0x1a, 0x7d, 0xbe, 0x03, 0x7a, 0x61, 0x07, 0xde, 0x2f, 0x14,
	0xe0, 0xab, 0x20, 0x91, 0x07, 0x63, 0xf9, 0x82, 0x2b, 0xbc, 0x07, 0x6d, 0xa9, 0x44, 0x2c, 0xd2,
	0xaa, 0xd8, 0xea, 0xa9, 0x54, 0xd8, 0xeb, 0x95, 0xc2, 0x3d, 0x80, 0xf1, 0x69, 0x26, 0x8b, 0x31,
	0xcf, 0x45, 0x3d, 0x75, 0x7f, 0x29, 0xff, 0xbc, 0x19, 0xbf, 0x5e, 0xfc, 0x87, 0xb3, 0x28, 0xd6,
	0xc8, 0xb0, 0xf1, 0x04, 0x70, 0x19, 0x51, 0xaf, 0x3b, 0x99, 0xaf, 0x7b, 0x4d, 0x27, 0xda, 0xa0,
	0xd3, 0x6d, 0x58, 0x7b, 0xc1, 0x45, 0x3c, 0x2e, 0x26, 0x32, 0x32, 0xe4, 0xa4, 0x6c, 0xee, 0xf0,
	0x7e, 0xb7, 0xa0, 0xd7, 0x1c, 0x6a, 0x43, 0x31, 0xc8, 0xb5, 0x14, 0xe3, 0x3e, 0x38, 0xe5, 0xa9,
	0x66, 0x9d, 0xbe, 0xab, 0xbb, 0x14, 0xc4, 0x82, 0x34, 0xfa, 0x3e, 0x50, 0xac, 0x09, 0xc6, 0x4d,
	0xcd, 0xca, 0xe7, 0xd5, 0xc6, 0x5c, 0xb2, 0xec, 0x1a, 0x81, 0xf7, 0xa0, 0x9b, 0xc9, 0xe7, 0x65,
	0x05, 0xfb, 0x8a, 0x0a, 0x33, 0x24, 0x7e, 0x04, 0xdd, 0x49, 0x10, 0x1f, 0x09, 0x9e, 0x44, 0xab,
	0x34, 0x6d, 0xc4, 0x66, 0x30, 0xec, 0x03, 0x94, 0xc2, 0x95, 0x8b, 0x38, 0xad, 0xa4, 0xac, 0xe1,
	0xd1, 0x32, 0x97, 0xf0, 0x34, 0x2e, 0xc6, 0x46, 0xd0, 0x28, 0xab, 0x2c, 0xfc, 0x18, 0xd6, 0xc2,
	0xa9, 0x7e, 0xfd, 0xa9, 0xba, 0x42, 0xbc, 0xe6, 0x38, 0xfc, 0x02, 0x6e, 0xce, 0x8c, 0xf2, 0x6e,
	0xed, 0x2b, 0xee, 0x76, 0x0e, 0xef, 0xfd, 0x4c, 0xc0, 0x69, 0xb0, 0x14, 0x3f, 0x68, 0x08, 0xc2,
	0xe5, 0x4f, 0x57, 0x0a, 0x85, 0x3f, 0x17, 0x8a, 0xd5, 0x45, 0x2b, 0x09, 0x59, 0xcd, 0xa3, 0xdf,
	0x08, 0x74, 0xaa, 0x00, 0xfc, 0x14, 0xec, 0x48, 0xe4, 0x85, 0x61, 0xe1, 0xcd, 0xad, 0xf7, 0x2e,
	0x4b, 0xec, 0x8f, 0x44, 0x5e, 0x28, 0x71, 0x38, 0xd5, 0x2b, 0xc3, 0x4c, 0x08, 0x7e, 0x08, 0xad,
	0x5c, 0xc4, 0x93, 0x60, 0xa5, 0x8a, 0xee, 0xb0, 0x12, 0xe4, 0x6d, 0x42, 0xaf, 0x99, 0x03, 0x01,
	0xda, 0x7b, 0xfb, 0x6c, 0xf7, 0xcb, 0x6f, 0xd7, 0x6f, 0xa0, 0x03, 0x9d, 0xef, 0xf6, 0xbe, 0xde,
	0xd9, 0x67, 0xbb, 0xeb, 0xc4, 0xfb, 0x1c, 0x5a, 0xe6, 0xea, 0xd8, 0x03, 0x52, 0x12, 0x9b, 0x30,
	0x72, 0xa2, 0xad, 0x53, 0xd3, 0x25, 0x61, 0xe4, 0x54, 0x5b, 0x2f, 0x4d, 0x5d, 0xc2, 0xc8, 0x4b,
	0x6d, 0x15, 0x46, 0x96, 0x09, 0x23, 0x45, 0x9d, 0x60, 0x67, 0x9e, 0x80, 0x2e, 0x24, 0xa0, 0x0b,
	0x09, 0xe8, 0x42, 0x02, 0xaa, 0x13, 0xdc, 0x05, 0x5b, 0x3f, 0xff, 0xf5, 0x1b, 0xa8, 0x22, 0xfe,
	0x47, 0xc5, 0xed, 0xcd, 0x3f, 0xce, 0xfa, 0xe4, 0xaf, 0xb3, 0x3e, 0xf9, 0xe7, 0xac, 0x4f, 0x7e,
	0xfd, 0xb7, 0x7f, 0x03, 0x9c, 0xc6, 0xf8, 0xb6, 0xad, 0x07, 0x22, 0x7c, 0x6a, 0x71, 0x11, 0xfe,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x41, 0x45, 0xbf, 0xb3, 0x97, 0x08, 0x00, 0x00,
}

func (m *Particle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Particle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Particle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mass != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Mass))))
		i--
		dAtA[i] = 0x55
	}
	if m.P != nil {
		{
			size, err := m.P.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Spin != nil {
		{
			size, err := m.Spin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Charge != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Charge))))
		i--
		dAtA[i] = 0x3d
	}
	if m.MassDouble != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MassDouble))))
		i--
		dAtA[i] = 0x31
	}
	if m.PDouble != nil {
		{
			size, err := m.PDouble.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Vertex != nil {
		{
			size, err := m.Vertex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Pdg != nil {
		i = encodeVarintEic(dAtA, i, uint64((uint32(*m.Pdg)<<1)^uint32((*m.Pdg>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Child) > 0 {
		dAtA6 := make([]byte, len(m.Child)*10)
		var j5 int
		for _, num := range m.Child {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintEic(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		dAtA8 := make([]byte, len(m.Parent)*10)
		var j7 int
		for _, num := range m.Parent {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintEic(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimHit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimHit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Particle != nil {
		i = encodeVarintEic(dAtA, i, uint64(*m.Particle))
		i--
		dAtA[i] = 0x28
	}
	if m.Edep != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Edep))))
		i--
		dAtA[i] = 0x25
	}
	if m.Globalpostpos != nil {
		{
			size, err := m.Globalpostpos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Globalprepos != nil {
		{
			size, err := m.Globalprepos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Volumeid != nil {
		i = encodeVarintEic(dAtA, i, uint64(*m.Volumeid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnergyDep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnergyDep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnergyDep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		dAtA12 := make([]byte, len(m.Source)*10)
		var j11 int
		for _, num := range m.Source {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintEic(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pos) > 0 {
		for iNdEx := len(m.Pos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Noise != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Noise))))
		i--
		dAtA[i] = 0x15
	}
	if m.Mean != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Mean))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *KernelMatrix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KernelMatrix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KernelMatrix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Kflat) > 0 {
		for iNdEx := len(m.Kflat) - 1; iNdEx >= 0; iNdEx-- {
			f13 := math.Float32bits(float32(m.Kflat[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f13))
		}
		i = encodeVarintEic(dAtA, i, uint64(len(m.Kflat)*4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Observation) > 0 {
		dAtA15 := make([]byte, len(m.Observation)*10)
		var j14 int
		for _, num := range m.Observation {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintEic(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Track) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Track) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Track) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Observation) > 0 {
		dAtA17 := make([]byte, len(m.Observation)*10)
		var j16 int
		for _, num := range m.Observation {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintEic(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Segment) > 0 {
		for iNdEx := len(m.Segment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CaloShower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaloShower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CaloShower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hypothesis) > 0 {
		for iNdEx := len(m.Hypothesis) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hypothesis[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Observation) > 0 {
		dAtA19 := make([]byte, len(m.Observation)*10)
		var j18 int
		for _, num := range m.Observation {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintEic(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		for iNdEx := len(m.Origin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Origin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CaloShower_ParticleHypothesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaloShower_ParticleHypothesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CaloShower_ParticleHypothesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weightmod != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Weightmod))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Edep != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Edep))))
		i--
		dAtA[i] = 0x15
	}
	if m.Pdg != nil {
		i = encodeVarintEic(dAtA, i, uint64((uint32(*m.Pdg)<<1)^uint32((*m.Pdg>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrackSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Magfield != nil {
		{
			size, err := m.Magfield.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Length != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Length))))
		i--
		dAtA[i] = 0x45
	}
	if m.Chargesign != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Chargesign))))
		i--
		dAtA[i] = 0x3d
	}
	if len(m.Curvaturenoise) > 0 {
		for iNdEx := len(m.Curvaturenoise) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Curvaturenoise[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Curvature != nil {
		{
			size, err := m.Curvature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Poqnoise) > 0 {
		for iNdEx := len(m.Poqnoise) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Poqnoise[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Poq != nil {
		{
			size, err := m.Poq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Vertexnoise) > 0 {
		for iNdEx := len(m.Vertexnoise) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vertexnoise[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Vertex != nil {
		{
			size, err := m.Vertex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObservedPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservedPos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObservedPos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weightmod != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Weightmod))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Noise) > 0 {
		for iNdEx := len(m.Noise) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Noise[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Mean != nil {
		{
			size, err := m.Mean.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RandVar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandVar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RandVar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sigma != nil {
		{
			size, err := m.Sigma.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Dist != nil {
		i = encodeVarintEic(dAtA, i, uint64(*m.Dist))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *XYZTD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZTD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.T != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.T))))
		i--
		dAtA[i] = 0x21
	}
	if m.Z != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Z))))
		i--
		dAtA[i] = 0x19
	}
	if m.Y != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Y))))
		i--
		dAtA[i] = 0x11
	}
	if m.X != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.X))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *XYZTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.T != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.T))))
		i--
		dAtA[i] = 0x25
	}
	if m.Z != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Z))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *XYZD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Z != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Z))))
		i--
		dAtA[i] = 0x19
	}
	if m.Y != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Y))))
		i--
		dAtA[i] = 0x11
	}
	if m.X != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.X))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *XYZF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Z != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Z))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintEic(dAtA []byte, offset int, v uint64) int {
	offset -= sovEic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Particle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parent) > 0 {
		l = 0
		for _, e := range m.Parent {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if len(m.Child) > 0 {
		l = 0
		for _, e := range m.Child {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if m.Pdg != nil {
		n += 1 + sozEic(uint64(*m.Pdg))
	}
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.PDouble != nil {
		l = m.PDouble.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.MassDouble != nil {
		n += 9
	}
	if m.Charge != nil {
		n += 5
	}
	if m.Spin != nil {
		l = m.Spin.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Mass != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimHit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volumeid != nil {
		n += 1 + sovEic(uint64(*m.Volumeid))
	}
	if m.Globalprepos != nil {
		l = m.Globalprepos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Globalpostpos != nil {
		l = m.Globalpostpos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Edep != nil {
		n += 5
	}
	if m.Particle != nil {
		n += 1 + sovEic(uint64(*m.Particle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnergyDep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mean != nil {
		n += 5
	}
	if m.Noise != nil {
		n += 5
	}
	if len(m.Pos) > 0 {
		for _, e := range m.Pos {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if len(m.Source) > 0 {
		l = 0
		for _, e := range m.Source {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KernelMatrix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Observation) > 0 {
		l = 0
		for _, e := range m.Observation {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if len(m.Kflat) > 0 {
		n += 1 + sovEic(uint64(len(m.Kflat)*4)) + len(m.Kflat)*4
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Track) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Segment) > 0 {
		for _, e := range m.Segment {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if len(m.Observation) > 0 {
		l = 0
		for _, e := range m.Observation {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CaloShower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Origin) > 0 {
		for _, e := range m.Origin {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if len(m.Observation) > 0 {
		l = 0
		for _, e := range m.Observation {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if len(m.Hypothesis) > 0 {
		for _, e := range m.Hypothesis {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CaloShower_ParticleHypothesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pdg != nil {
		n += 1 + sozEic(uint64(*m.Pdg))
	}
	if m.Edep != nil {
		n += 5
	}
	if m.Weightmod != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if len(m.Vertexnoise) > 0 {
		for _, e := range m.Vertexnoise {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.Poq != nil {
		l = m.Poq.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if len(m.Poqnoise) > 0 {
		for _, e := range m.Poqnoise {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.Curvature != nil {
		l = m.Curvature.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if len(m.Curvaturenoise) > 0 {
		for _, e := range m.Curvaturenoise {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.Chargesign != nil {
		n += 5
	}
	if m.Length != nil {
		n += 5
	}
	if m.Magfield != nil {
		l = m.Magfield.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ObservedPos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mean != nil {
		l = m.Mean.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if len(m.Noise) > 0 {
		for _, e := range m.Noise {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.Weightmod != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RandVar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dist != nil {
		n += 1 + sovEic(uint64(*m.Dist))
	}
	if m.Sigma != nil {
		l = m.Sigma.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZTD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 9
	}
	if m.Y != nil {
		n += 9
	}
	if m.Z != nil {
		n += 9
	}
	if m.T != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 5
	}
	if m.Y != nil {
		n += 5
	}
	if m.Z != nil {
		n += 5
	}
	if m.T != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 9
	}
	if m.Y != nil {
		n += 9
	}
	if m.Z != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 5
	}
	if m.Y != nil {
		n += 5
	}
	if m.Z != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEic(x uint64) (n int) {
	return sovEic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Particle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Particle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Particle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent = append(m.Parent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent) == 0 {
					m.Parent = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent = append(m.Parent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child = append(m.Child, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child) == 0 {
					m.Child = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child = append(m.Child, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pdg = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &XYZTD{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PDouble", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PDouble == nil {
				m.PDouble = &XYZD{}
			}
			if err := m.PDouble.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MassDouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MassDouble = &v2
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Charge = &v2
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spin == nil {
				m.Spin = &XYZF{}
			}
			if err := m.Spin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P == nil {
				m.P = &XYZF{}
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Mass = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumeid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Volumeid = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Globalprepos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Globalprepos == nil {
				m.Globalprepos = &XYZTD{}
			}
			if err := m.Globalprepos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Globalpostpos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Globalpostpos == nil {
				m.Globalpostpos = &XYZTD{}
			}
			if err := m.Globalpostpos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Edep = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particle", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Particle = &v
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnergyDep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnergyDep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnergyDep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Mean = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Noise = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pos = append(m.Pos, &ObservedPos{})
			if err := m.Pos[len(m.Pos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Source = append(m.Source, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Source) == 0 {
					m.Source = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Source = append(m.Source, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KernelMatrix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KernelMatrix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KernelMatrix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Observation = append(m.Observation, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Observation) == 0 {
					m.Observation = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Observation = append(m.Observation, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Observation", wireType)
			}
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Kflat = append(m.Kflat, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Kflat) == 0 {
					m.Kflat = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Kflat = append(m.Kflat, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Kflat", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Track) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Track: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Track: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = append(m.Segment, &TrackSegment{})
			if err := m.Segment[len(m.Segment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Observation = append(m.Observation, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Observation) == 0 {
					m.Observation = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Observation = append(m.Observation, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Observation", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaloShower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaloShower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaloShower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = append(m.Origin, &ObservedPos{})
			if err := m.Origin[len(m.Origin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Observation = append(m.Observation, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEic
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Observation) == 0 {
					m.Observation = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Observation = append(m.Observation, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Observation", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hypothesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hypothesis = append(m.Hypothesis, &CaloShower_ParticleHypothesis{})
			if err := m.Hypothesis[len(m.Hypothesis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaloShower_ParticleHypothesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticleHypothesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticleHypothesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pdg = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Edep = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weightmod", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Weightmod = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &XYZTD{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertexnoise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vertexnoise = append(m.Vertexnoise, &RandVar{})
			if err := m.Vertexnoise[len(m.Vertexnoise)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Poq == nil {
				m.Poq = &XYZD{}
			}
			if err := m.Poq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poqnoise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poqnoise = append(m.Poqnoise, &RandVar{})
			if err := m.Poqnoise[len(m.Poqnoise)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curvature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Curvature == nil {
				m.Curvature = &XYZD{}
			}
			if err := m.Curvature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curvaturenoise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curvaturenoise = append(m.Curvaturenoise, &RandVar{})
			if err := m.Curvaturenoise[len(m.Curvaturenoise)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chargesign", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Chargesign = &v2
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Length = &v2
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magfield", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Magfield == nil {
				m.Magfield = &XYZD{}
			}
			if err := m.Magfield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObservedPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservedPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservedPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mean == nil {
				m.Mean = &XYZTD{}
			}
			if err := m.Mean.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Noise = append(m.Noise, &RandVar{})
			if err := m.Noise[len(m.Noise)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weightmod", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Weightmod = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandVar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandVar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandVar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
			var v RandVar_Distribution
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RandVar_Distribution(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dist = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigma", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sigma == nil {
				m.Sigma = &XYZTF{}
			}
			if err := m.Sigma.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.X = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Z = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.T = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.X = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Z = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.T = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.X = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Z = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.X = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Z = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEic = fmt.Errorf("proto: unexpected end of group")
)
