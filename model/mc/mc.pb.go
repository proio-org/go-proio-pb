// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/model/mc/mc.proto

package mc

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Particle struct {
	// ProIO entry identifiers that point to parent Particles
	Parent []uint64 `protobuf:"varint,1,rep,name=parent" json:"parent,omitempty"`
	// ProIO entry identifiers that point to child Particles
	Child []uint64 `protobuf:"varint,2,rep,name=child" json:"child,omitempty"`
	// PDG code
	Pdg *int32 `protobuf:"zigzag32,3,opt,name=pdg" json:"pdg,omitempty"`
	// position in mm and time in ns
	Vertex *XYZTF `protobuf:"bytes,4,opt,name=vertex" json:"vertex,omitempty"`
	// 3-momentum in GeV
	P *XYZF `protobuf:"bytes,5,opt,name=p" json:"p,omitempty"`
	// energy in GeV
	Energy *float32 `protobuf:"fixed32,6,opt,name=energy" json:"energy,omitempty"`
	// mass in GeV
	Mass *float32 `protobuf:"fixed32,7,opt,name=mass" json:"mass,omitempty"`
	// charge in units of elementary charge / 3
	Charge *int32 `protobuf:"zigzag32,8,opt,name=charge" json:"charge,omitempty"`
	// 2 *spin + 1
	Spin *uint32 `protobuf:"varint,13,opt,name=spin" json:"spin,omitempty"`
	// status code
	Status *int32 `protobuf:"zigzag32,10,opt,name=status" json:"status,omitempty"`
	// barcode
	Barcode *int32 `protobuf:"zigzag32,11,opt,name=barcode" json:"barcode,omitempty"`
	// original position in the MC generator
	Id *uint32 `protobuf:"varint,12,opt,name=id" json:"id,omitempty"`
	// deprecated
	SpinSint32           *int32   `protobuf:"zigzag32,9,opt,name=spin_sint32,json=spinSint32" json:"spin_sint32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Particle) Reset()         { *m = Particle{} }
func (m *Particle) String() string { return proto.CompactTextString(m) }
func (*Particle) ProtoMessage()    {}
func (*Particle) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{0}
}
func (m *Particle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Particle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Particle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Particle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Particle.Merge(m, src)
}
func (m *Particle) XXX_Size() int {
	return m.Size()
}
func (m *Particle) XXX_DiscardUnknown() {
	xxx_messageInfo_Particle.DiscardUnknown(m)
}

var xxx_messageInfo_Particle proto.InternalMessageInfo

func (m *Particle) GetParent() []uint64 {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Particle) GetChild() []uint64 {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *Particle) GetPdg() int32 {
	if m != nil && m.Pdg != nil {
		return *m.Pdg
	}
	return 0
}

func (m *Particle) GetVertex() *XYZTF {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *Particle) GetP() *XYZF {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Particle) GetEnergy() float32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *Particle) GetMass() float32 {
	if m != nil && m.Mass != nil {
		return *m.Mass
	}
	return 0
}

func (m *Particle) GetCharge() int32 {
	if m != nil && m.Charge != nil {
		return *m.Charge
	}
	return 0
}

func (m *Particle) GetSpin() uint32 {
	if m != nil && m.Spin != nil {
		return *m.Spin
	}
	return 0
}

func (m *Particle) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Particle) GetBarcode() int32 {
	if m != nil && m.Barcode != nil {
		return *m.Barcode
	}
	return 0
}

func (m *Particle) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Particle) GetSpinSint32() int32 {
	if m != nil && m.SpinSint32 != nil {
		return *m.SpinSint32
	}
	return 0
}

// This message is an optional alternative to `Particle` for minimizing field
// identifier overhead.
type PackedParticles struct {
	// original position in the MC generator
	Id []uint32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
	// PDG code
	Pdg []int32 `protobuf:"zigzag32,2,rep,packed,name=pdg" json:"pdg,omitempty"`
	// status code
	Status []uint32 `protobuf:"varint,3,rep,packed,name=status" json:"status,omitempty"`
	// mass in GeV
	Mass []float32 `protobuf:"fixed32,4,rep,packed,name=mass" json:"mass,omitempty"`
	// 3-momentum in GeV
	Px []float32 `protobuf:"fixed32,5,rep,packed,name=Px" json:"Px,omitempty"`
	Py []float32 `protobuf:"fixed32,6,rep,packed,name=Py" json:"Py,omitempty"`
	Pz []float32 `protobuf:"fixed32,7,rep,packed,name=Pz" json:"Pz,omitempty"`
	// ProIO entry identifiers that point to parent Particles
	Parent1 []uint32 `protobuf:"varint,8,rep,packed,name=parent1" json:"parent1,omitempty"`
	Parent2 []uint32 `protobuf:"varint,9,rep,packed,name=parent2" json:"parent2,omitempty"`
	// ProIO entry identifiers that point to child Particles
	Child1 []uint32 `protobuf:"varint,10,rep,packed,name=child1" json:"child1,omitempty"`
	Child2 []uint32 `protobuf:"varint,11,rep,packed,name=child2" json:"child2,omitempty"`
	// barcode
	Barcode []int32 `protobuf:"zigzag32,12,rep,packed,name=barcode" json:"barcode,omitempty"`
	// vertex position in mm and time in ns
	X []float32 `protobuf:"fixed32,13,rep,packed,name=X" json:"X,omitempty"`
	Y []float32 `protobuf:"fixed32,14,rep,packed,name=Y" json:"Y,omitempty"`
	Z []float32 `protobuf:"fixed32,15,rep,packed,name=Z" json:"Z,omitempty"`
	T []float32 `protobuf:"fixed32,16,rep,packed,name=T" json:"T,omitempty"`
	// particle weight
	Weight []float32 `protobuf:"fixed32,17,rep,packed,name=weight" json:"weight,omitempty"`
	// charge in units of elementary charge / 3
	Charge []int32 `protobuf:"zigzag32,18,rep,packed,name=charge" json:"charge,omitempty"`
	// energy in GeV
	Energy               []float32 `protobuf:"fixed32,19,rep,packed,name=energy" json:"energy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PackedParticles) Reset()         { *m = PackedParticles{} }
func (m *PackedParticles) String() string { return proto.CompactTextString(m) }
func (*PackedParticles) ProtoMessage()    {}
func (*PackedParticles) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{1}
}
func (m *PackedParticles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackedParticles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackedParticles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackedParticles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackedParticles.Merge(m, src)
}
func (m *PackedParticles) XXX_Size() int {
	return m.Size()
}
func (m *PackedParticles) XXX_DiscardUnknown() {
	xxx_messageInfo_PackedParticles.DiscardUnknown(m)
}

var xxx_messageInfo_PackedParticles proto.InternalMessageInfo

func (m *PackedParticles) GetId() []uint32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PackedParticles) GetPdg() []int32 {
	if m != nil {
		return m.Pdg
	}
	return nil
}

func (m *PackedParticles) GetStatus() []uint32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PackedParticles) GetMass() []float32 {
	if m != nil {
		return m.Mass
	}
	return nil
}

func (m *PackedParticles) GetPx() []float32 {
	if m != nil {
		return m.Px
	}
	return nil
}

func (m *PackedParticles) GetPy() []float32 {
	if m != nil {
		return m.Py
	}
	return nil
}

func (m *PackedParticles) GetPz() []float32 {
	if m != nil {
		return m.Pz
	}
	return nil
}

func (m *PackedParticles) GetParent1() []uint32 {
	if m != nil {
		return m.Parent1
	}
	return nil
}

func (m *PackedParticles) GetParent2() []uint32 {
	if m != nil {
		return m.Parent2
	}
	return nil
}

func (m *PackedParticles) GetChild1() []uint32 {
	if m != nil {
		return m.Child1
	}
	return nil
}

func (m *PackedParticles) GetChild2() []uint32 {
	if m != nil {
		return m.Child2
	}
	return nil
}

func (m *PackedParticles) GetBarcode() []int32 {
	if m != nil {
		return m.Barcode
	}
	return nil
}

func (m *PackedParticles) GetX() []float32 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *PackedParticles) GetY() []float32 {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *PackedParticles) GetZ() []float32 {
	if m != nil {
		return m.Z
	}
	return nil
}

func (m *PackedParticles) GetT() []float32 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *PackedParticles) GetWeight() []float32 {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *PackedParticles) GetCharge() []int32 {
	if m != nil {
		return m.Charge
	}
	return nil
}

func (m *PackedParticles) GetEnergy() []float32 {
	if m != nil {
		return m.Energy
	}
	return nil
}

// This message is an optional alternative to `Particle` which uses protobuf
// variable integers for compression.  This effectively makes the change from
// floating-point to fixed-point numbers.  Units for these fixed-point numbers
// are to be specified in metadata as human-readable strings with keys
// "info:varint_energy", "info:varint_length", "info:varint_time".
type VarintParticle struct {
	// ProIO entry identifiers that point to parent Particles
	Parent []uint64 `protobuf:"varint,1,rep,name=parent" json:"parent,omitempty"`
	// ProIO entry identifiers that point to child Particles
	Child []uint64 `protobuf:"varint,2,rep,name=child" json:"child,omitempty"`
	// PDG code
	Pdg *int32 `protobuf:"zigzag32,3,opt,name=pdg" json:"pdg,omitempty"`
	// position and time in units specified in metadata
	Vertex *XYZTI `protobuf:"bytes,4,opt,name=vertex" json:"vertex,omitempty"`
	// 3-momentum in units specified in metadata
	P *XYZI `protobuf:"bytes,5,opt,name=p" json:"p,omitempty"`
	// energy in units specified in metadata
	Energy *uint64 `protobuf:"varint,6,opt,name=energy" json:"energy,omitempty"`
	// mass in units specified in metadata
	Mass *uint64 `protobuf:"varint,7,opt,name=mass" json:"mass,omitempty"`
	// charge in units of elementary charge / 3
	Charge *int32 `protobuf:"zigzag32,8,opt,name=charge" json:"charge,omitempty"`
	// 2 *spin + 1
	Spin *uint32 `protobuf:"varint,13,opt,name=spin" json:"spin,omitempty"`
	// status code
	Status *int32 `protobuf:"zigzag32,10,opt,name=status" json:"status,omitempty"`
	// barcode
	Barcode *int32 `protobuf:"zigzag32,11,opt,name=barcode" json:"barcode,omitempty"`
	// original position in the MC generator
	Id *uint32 `protobuf:"varint,12,opt,name=id" json:"id,omitempty"`
	// deprecated
	SpinSint32           *int32   `protobuf:"zigzag32,9,opt,name=spin_sint32,json=spinSint32" json:"spin_sint32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VarintParticle) Reset()         { *m = VarintParticle{} }
func (m *VarintParticle) String() string { return proto.CompactTextString(m) }
func (*VarintParticle) ProtoMessage()    {}
func (*VarintParticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{2}
}
func (m *VarintParticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VarintParticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VarintParticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VarintParticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VarintParticle.Merge(m, src)
}
func (m *VarintParticle) XXX_Size() int {
	return m.Size()
}
func (m *VarintParticle) XXX_DiscardUnknown() {
	xxx_messageInfo_VarintParticle.DiscardUnknown(m)
}

var xxx_messageInfo_VarintParticle proto.InternalMessageInfo

func (m *VarintParticle) GetParent() []uint64 {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *VarintParticle) GetChild() []uint64 {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *VarintParticle) GetPdg() int32 {
	if m != nil && m.Pdg != nil {
		return *m.Pdg
	}
	return 0
}

func (m *VarintParticle) GetVertex() *XYZTI {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *VarintParticle) GetP() *XYZI {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *VarintParticle) GetEnergy() uint64 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *VarintParticle) GetMass() uint64 {
	if m != nil && m.Mass != nil {
		return *m.Mass
	}
	return 0
}

func (m *VarintParticle) GetCharge() int32 {
	if m != nil && m.Charge != nil {
		return *m.Charge
	}
	return 0
}

func (m *VarintParticle) GetSpin() uint32 {
	if m != nil && m.Spin != nil {
		return *m.Spin
	}
	return 0
}

func (m *VarintParticle) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *VarintParticle) GetBarcode() int32 {
	if m != nil && m.Barcode != nil {
		return *m.Barcode
	}
	return 0
}

func (m *VarintParticle) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VarintParticle) GetSpinSint32() int32 {
	if m != nil && m.SpinSint32 != nil {
		return *m.SpinSint32
	}
	return 0
}

// This message combines VarintParticle and PackedParticles for minimal field
// identifier overhead as well as varint compression.
type VarintPackedParticles struct {
	// original position in the MC generator
	Id []uint32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
	// PDG code
	Pdg []int32 `protobuf:"zigzag32,2,rep,packed,name=pdg" json:"pdg,omitempty"`
	// status code
	Status []uint32 `protobuf:"varint,3,rep,packed,name=status" json:"status,omitempty"`
	// mass in units specified in metadata
	Mass []uint64 `protobuf:"varint,4,rep,packed,name=mass" json:"mass,omitempty"`
	// 3-momentum in units specified in metadata
	Px []int64 `protobuf:"zigzag64,5,rep,packed,name=Px" json:"Px,omitempty"`
	Py []int64 `protobuf:"zigzag64,6,rep,packed,name=Py" json:"Py,omitempty"`
	Pz []int64 `protobuf:"zigzag64,7,rep,packed,name=Pz" json:"Pz,omitempty"`
	// ProIO entry identifiers that point to parent Particles
	Parent1 []uint32 `protobuf:"varint,8,rep,packed,name=parent1" json:"parent1,omitempty"`
	Parent2 []uint32 `protobuf:"varint,9,rep,packed,name=parent2" json:"parent2,omitempty"`
	// ProIO entry identifiers that point to child Particles
	Child1 []uint32 `protobuf:"varint,10,rep,packed,name=child1" json:"child1,omitempty"`
	Child2 []uint32 `protobuf:"varint,11,rep,packed,name=child2" json:"child2,omitempty"`
	// barcode
	Barcode []int32 `protobuf:"zigzag32,12,rep,packed,name=barcode" json:"barcode,omitempty"`
	// vertex position in mm and time in ns
	X []int64  `protobuf:"zigzag64,13,rep,packed,name=X" json:"X,omitempty"`
	Y []int64  `protobuf:"zigzag64,14,rep,packed,name=Y" json:"Y,omitempty"`
	Z []int64  `protobuf:"zigzag64,15,rep,packed,name=Z" json:"Z,omitempty"`
	T []uint64 `protobuf:"varint,16,rep,packed,name=T" json:"T,omitempty"`
	// particle weight
	Weight []uint64 `protobuf:"varint,17,rep,packed,name=weight" json:"weight,omitempty"`
	// charge in units of elementary charge / 3
	Charge []int32 `protobuf:"zigzag32,18,rep,packed,name=charge" json:"charge,omitempty"`
	// energy in units specified in metadata
	Energy               []uint64 `protobuf:"varint,19,rep,packed,name=energy" json:"energy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VarintPackedParticles) Reset()         { *m = VarintPackedParticles{} }
func (m *VarintPackedParticles) String() string { return proto.CompactTextString(m) }
func (*VarintPackedParticles) ProtoMessage()    {}
func (*VarintPackedParticles) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{3}
}
func (m *VarintPackedParticles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VarintPackedParticles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VarintPackedParticles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VarintPackedParticles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VarintPackedParticles.Merge(m, src)
}
func (m *VarintPackedParticles) XXX_Size() int {
	return m.Size()
}
func (m *VarintPackedParticles) XXX_DiscardUnknown() {
	xxx_messageInfo_VarintPackedParticles.DiscardUnknown(m)
}

var xxx_messageInfo_VarintPackedParticles proto.InternalMessageInfo

func (m *VarintPackedParticles) GetId() []uint32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VarintPackedParticles) GetPdg() []int32 {
	if m != nil {
		return m.Pdg
	}
	return nil
}

func (m *VarintPackedParticles) GetStatus() []uint32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VarintPackedParticles) GetMass() []uint64 {
	if m != nil {
		return m.Mass
	}
	return nil
}

func (m *VarintPackedParticles) GetPx() []int64 {
	if m != nil {
		return m.Px
	}
	return nil
}

func (m *VarintPackedParticles) GetPy() []int64 {
	if m != nil {
		return m.Py
	}
	return nil
}

func (m *VarintPackedParticles) GetPz() []int64 {
	if m != nil {
		return m.Pz
	}
	return nil
}

func (m *VarintPackedParticles) GetParent1() []uint32 {
	if m != nil {
		return m.Parent1
	}
	return nil
}

func (m *VarintPackedParticles) GetParent2() []uint32 {
	if m != nil {
		return m.Parent2
	}
	return nil
}

func (m *VarintPackedParticles) GetChild1() []uint32 {
	if m != nil {
		return m.Child1
	}
	return nil
}

func (m *VarintPackedParticles) GetChild2() []uint32 {
	if m != nil {
		return m.Child2
	}
	return nil
}

func (m *VarintPackedParticles) GetBarcode() []int32 {
	if m != nil {
		return m.Barcode
	}
	return nil
}

func (m *VarintPackedParticles) GetX() []int64 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *VarintPackedParticles) GetY() []int64 {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *VarintPackedParticles) GetZ() []int64 {
	if m != nil {
		return m.Z
	}
	return nil
}

func (m *VarintPackedParticles) GetT() []uint64 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *VarintPackedParticles) GetWeight() []uint64 {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *VarintPackedParticles) GetCharge() []int32 {
	if m != nil {
		return m.Charge
	}
	return nil
}

func (m *VarintPackedParticles) GetEnergy() []uint64 {
	if m != nil {
		return m.Energy
	}
	return nil
}

// This message is for general Monte Carlo generators.
type MCParameters struct {
	Number    *uint64  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Processid *int32   `protobuf:"varint,2,opt,name=processid" json:"processid,omitempty"`
	Weight    *float64 `protobuf:"fixed64,3,opt,name=weight" json:"weight,omitempty"`
	// keep extra data as key-value (int)
	IntExtra map[string]*ArrayInt `protobuf:"bytes,4,rep,name=int_extra,json=intExtra" json:"int_extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// keep extra data as key-value (double)
	FloatExtra           map[string]*ArrayDouble `protobuf:"bytes,5,rep,name=float_extra,json=floatExtra" json:"float_extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MCParameters) Reset()         { *m = MCParameters{} }
func (m *MCParameters) String() string { return proto.CompactTextString(m) }
func (*MCParameters) ProtoMessage()    {}
func (*MCParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{4}
}
func (m *MCParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MCParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MCParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MCParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MCParameters.Merge(m, src)
}
func (m *MCParameters) XXX_Size() int {
	return m.Size()
}
func (m *MCParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_MCParameters.DiscardUnknown(m)
}

var xxx_messageInfo_MCParameters proto.InternalMessageInfo

func (m *MCParameters) GetNumber() uint64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *MCParameters) GetProcessid() int32 {
	if m != nil && m.Processid != nil {
		return *m.Processid
	}
	return 0
}

func (m *MCParameters) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *MCParameters) GetIntExtra() map[string]*ArrayInt {
	if m != nil {
		return m.IntExtra
	}
	return nil
}

func (m *MCParameters) GetFloatExtra() map[string]*ArrayDouble {
	if m != nil {
		return m.FloatExtra
	}
	return nil
}

// array of signed integers
type ArrayInt struct {
	Value                []int32  `protobuf:"zigzag32,1,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayInt) Reset()         { *m = ArrayInt{} }
func (m *ArrayInt) String() string { return proto.CompactTextString(m) }
func (*ArrayInt) ProtoMessage()    {}
func (*ArrayInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{5}
}
func (m *ArrayInt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArrayInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArrayInt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArrayInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayInt.Merge(m, src)
}
func (m *ArrayInt) XXX_Size() int {
	return m.Size()
}
func (m *ArrayInt) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayInt.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayInt proto.InternalMessageInfo

func (m *ArrayInt) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// array of floating point values
type ArrayDouble struct {
	Value                []float64 `protobuf:"fixed64,1,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ArrayDouble) Reset()         { *m = ArrayDouble{} }
func (m *ArrayDouble) String() string { return proto.CompactTextString(m) }
func (*ArrayDouble) ProtoMessage()    {}
func (*ArrayDouble) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{6}
}
func (m *ArrayDouble) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArrayDouble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArrayDouble.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArrayDouble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayDouble.Merge(m, src)
}
func (m *ArrayDouble) XXX_Size() int {
	return m.Size()
}
func (m *ArrayDouble) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayDouble.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayDouble proto.InternalMessageInfo

func (m *ArrayDouble) GetValue() []float64 {
	if m != nil {
		return m.Value
	}
	return nil
}

// This block is only for Pythia8.
type Pythia8Parameters struct {
	WeightSum     *float64 `protobuf:"fixed64,1,opt,name=weight_sum,json=weightSum" json:"weight_sum,omitempty"`
	MergingWeight *float64 `protobuf:"fixed64,2,opt,name=merging_weight,json=mergingWeight" json:"merging_weight,omitempty"`
	//transverse momentum
	PtHat   *float64 `protobuf:"fixed64,3,opt,name=pt_hat,json=ptHat" json:"pt_hat,omitempty"`
	AlphaEm *float64 `protobuf:"fixed64,4,opt,name=alpha_em,json=alphaEm" json:"alpha_em,omitempty"`
	AlphaS  *float64 `protobuf:"fixed64,5,opt,name=alpha_s,json=alphaS" json:"alpha_s,omitempty"`
	// Q-scale used in evaluation of PDF’s (in GeV)
	ScaleQFac *float64 `protobuf:"fixed64,6,opt,name=scale_q_fac,json=scaleQFac" json:"scale_q_fac,omitempty"`
	// event weight
	Weight *float64 `protobuf:"fixed64,7,opt,name=weight" json:"weight,omitempty"`
	// fraction of beam momentum carried by first parton (”beam side”)
	X1 *float64 `protobuf:"fixed64,8,opt,name=x1" json:"x1,omitempty"`
	// fraction of beam momentum carried by second parton (”target side”)
	X2 *float64 `protobuf:"fixed64,9,opt,name=x2" json:"x2,omitempty"`
	// flavour code of first parton
	Id1 *uint64 `protobuf:"varint,10,opt,name=id1" json:"id1,omitempty"`
	// flavour code of second parton
	Id2                  *uint64  `protobuf:"varint,11,opt,name=id2" json:"id2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pythia8Parameters) Reset()         { *m = Pythia8Parameters{} }
func (m *Pythia8Parameters) String() string { return proto.CompactTextString(m) }
func (*Pythia8Parameters) ProtoMessage()    {}
func (*Pythia8Parameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{7}
}
func (m *Pythia8Parameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pythia8Parameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pythia8Parameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pythia8Parameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pythia8Parameters.Merge(m, src)
}
func (m *Pythia8Parameters) XXX_Size() int {
	return m.Size()
}
func (m *Pythia8Parameters) XXX_DiscardUnknown() {
	xxx_messageInfo_Pythia8Parameters.DiscardUnknown(m)
}

var xxx_messageInfo_Pythia8Parameters proto.InternalMessageInfo

func (m *Pythia8Parameters) GetWeightSum() float64 {
	if m != nil && m.WeightSum != nil {
		return *m.WeightSum
	}
	return 0
}

func (m *Pythia8Parameters) GetMergingWeight() float64 {
	if m != nil && m.MergingWeight != nil {
		return *m.MergingWeight
	}
	return 0
}

func (m *Pythia8Parameters) GetPtHat() float64 {
	if m != nil && m.PtHat != nil {
		return *m.PtHat
	}
	return 0
}

func (m *Pythia8Parameters) GetAlphaEm() float64 {
	if m != nil && m.AlphaEm != nil {
		return *m.AlphaEm
	}
	return 0
}

func (m *Pythia8Parameters) GetAlphaS() float64 {
	if m != nil && m.AlphaS != nil {
		return *m.AlphaS
	}
	return 0
}

func (m *Pythia8Parameters) GetScaleQFac() float64 {
	if m != nil && m.ScaleQFac != nil {
		return *m.ScaleQFac
	}
	return 0
}

func (m *Pythia8Parameters) GetWeight() float64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *Pythia8Parameters) GetX1() float64 {
	if m != nil && m.X1 != nil {
		return *m.X1
	}
	return 0
}

func (m *Pythia8Parameters) GetX2() float64 {
	if m != nil && m.X2 != nil {
		return *m.X2
	}
	return 0
}

func (m *Pythia8Parameters) GetId1() uint64 {
	if m != nil && m.Id1 != nil {
		return *m.Id1
	}
	return 0
}

func (m *Pythia8Parameters) GetId2() uint64 {
	if m != nil && m.Id2 != nil {
		return *m.Id2
	}
	return 0
}

// auxiliary message types
type XYZTF struct {
	X                    *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z                    *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	T                    *float32 `protobuf:"fixed32,4,opt,name=t" json:"t,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZTF) Reset()         { *m = XYZTF{} }
func (m *XYZTF) String() string { return proto.CompactTextString(m) }
func (*XYZTF) ProtoMessage()    {}
func (*XYZTF) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{8}
}
func (m *XYZTF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZTF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZTF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZTF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZTF.Merge(m, src)
}
func (m *XYZTF) XXX_Size() int {
	return m.Size()
}
func (m *XYZTF) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZTF.DiscardUnknown(m)
}

var xxx_messageInfo_XYZTF proto.InternalMessageInfo

func (m *XYZTF) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZTF) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZTF) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func (m *XYZTF) GetT() float32 {
	if m != nil && m.T != nil {
		return *m.T
	}
	return 0
}

type XYZTI struct {
	X                    *int64   `protobuf:"zigzag64,1,opt,name=x" json:"x,omitempty"`
	Y                    *int64   `protobuf:"zigzag64,2,opt,name=y" json:"y,omitempty"`
	Z                    *int64   `protobuf:"zigzag64,3,opt,name=z" json:"z,omitempty"`
	T                    *uint64  `protobuf:"varint,4,opt,name=t" json:"t,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZTI) Reset()         { *m = XYZTI{} }
func (m *XYZTI) String() string { return proto.CompactTextString(m) }
func (*XYZTI) ProtoMessage()    {}
func (*XYZTI) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{9}
}
func (m *XYZTI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZTI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZTI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZTI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZTI.Merge(m, src)
}
func (m *XYZTI) XXX_Size() int {
	return m.Size()
}
func (m *XYZTI) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZTI.DiscardUnknown(m)
}

var xxx_messageInfo_XYZTI proto.InternalMessageInfo

func (m *XYZTI) GetX() int64 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZTI) GetY() int64 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZTI) GetZ() int64 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func (m *XYZTI) GetT() uint64 {
	if m != nil && m.T != nil {
		return *m.T
	}
	return 0
}

type XYZF struct {
	X                    *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z                    *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZF) Reset()         { *m = XYZF{} }
func (m *XYZF) String() string { return proto.CompactTextString(m) }
func (*XYZF) ProtoMessage()    {}
func (*XYZF) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{10}
}
func (m *XYZF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZF.Merge(m, src)
}
func (m *XYZF) XXX_Size() int {
	return m.Size()
}
func (m *XYZF) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZF.DiscardUnknown(m)
}

var xxx_messageInfo_XYZF proto.InternalMessageInfo

func (m *XYZF) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZF) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZF) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

type XYZI struct {
	X                    *int64   `protobuf:"zigzag64,1,opt,name=x" json:"x,omitempty"`
	Y                    *int64   `protobuf:"zigzag64,2,opt,name=y" json:"y,omitempty"`
	Z                    *int64   `protobuf:"zigzag64,3,opt,name=z" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZI) Reset()         { *m = XYZI{} }
func (m *XYZI) String() string { return proto.CompactTextString(m) }
func (*XYZI) ProtoMessage()    {}
func (*XYZI) Descriptor() ([]byte, []int) {
	return fileDescriptor_787330611fe93f0d, []int{11}
}
func (m *XYZI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XYZI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XYZI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XYZI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZI.Merge(m, src)
}
func (m *XYZI) XXX_Size() int {
	return m.Size()
}
func (m *XYZI) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZI.DiscardUnknown(m)
}

var xxx_messageInfo_XYZI proto.InternalMessageInfo

func (m *XYZI) GetX() int64 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *XYZI) GetY() int64 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *XYZI) GetZ() int64 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*Particle)(nil), "proio.model.mc.Particle")
	proto.RegisterType((*PackedParticles)(nil), "proio.model.mc.PackedParticles")
	proto.RegisterType((*VarintParticle)(nil), "proio.model.mc.VarintParticle")
	proto.RegisterType((*VarintPackedParticles)(nil), "proio.model.mc.VarintPackedParticles")
	proto.RegisterType((*MCParameters)(nil), "proio.model.mc.MCParameters")
	proto.RegisterMapType((map[string]*ArrayDouble)(nil), "proio.model.mc.MCParameters.FloatExtraEntry")
	proto.RegisterMapType((map[string]*ArrayInt)(nil), "proio.model.mc.MCParameters.IntExtraEntry")
	proto.RegisterType((*ArrayInt)(nil), "proio.model.mc.ArrayInt")
	proto.RegisterType((*ArrayDouble)(nil), "proio.model.mc.ArrayDouble")
	proto.RegisterType((*Pythia8Parameters)(nil), "proio.model.mc.Pythia8Parameters")
	proto.RegisterType((*XYZTF)(nil), "proio.model.mc.XYZTF")
	proto.RegisterType((*XYZTI)(nil), "proio.model.mc.XYZTI")
	proto.RegisterType((*XYZF)(nil), "proio.model.mc.XYZF")
	proto.RegisterType((*XYZI)(nil), "proio.model.mc.XYZI")
}

func init() { proto.RegisterFile("proio/model/mc/mc.proto", fileDescriptor_787330611fe93f0d) }

var fileDescriptor_787330611fe93f0d = []byte{
	// 977 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6f, 0x23, 0x45,
	0x10, 0xa5, 0xdb, 0xe3, 0xd8, 0xae, 0x89, 0x9d, 0xb8, 0x49, 0x76, 0x9b, 0xb0, 0x18, 0xcb, 0x68,
	0x25, 0x0b, 0x81, 0x83, 0x87, 0xcb, 0x8a, 0x0b, 0x22, 0x90, 0x80, 0x0f, 0x91, 0xcc, 0x24, 0x40,
	0xe2, 0x8b, 0xd5, 0x19, 0x77, 0xec, 0xd1, 0x7a, 0xc6, 0xc3, 0x4c, 0x7b, 0xb1, 0xf3, 0x4b, 0x38,
	0x72, 0xe3, 0xaf, 0x70, 0xe4, 0x08, 0x17, 0x40, 0xe1, 0x8f, 0xa0, 0xae, 0xf9, 0xb2, 0x1d, 0x0b,
	0x2d, 0x48, 0x20, 0xb8, 0x75, 0xbd, 0x7e, 0xf3, 0xba, 0xba, 0xba, 0x5e, 0x69, 0xe0, 0x71, 0x10,
	0xce, 0xdc, 0xd9, 0xb1, 0x37, 0x1b, 0xc9, 0xe9, 0xb1, 0xe7, 0x1c, 0x7b, 0x4e, 0x27, 0x08, 0x67,
	0x6a, 0xc6, 0x6a, 0xb8, 0xd1, 0xc1, 0x8d, 0x8e, 0xe7, 0xb4, 0x7e, 0xa2, 0x50, 0xee, 0x8b, 0x50,
	0xb9, 0xce, 0x54, 0xb2, 0x47, 0xb0, 0x13, 0x88, 0x50, 0xfa, 0x8a, 0x93, 0x66, 0xa1, 0x6d, 0xd8,
	0x49, 0xc4, 0x0e, 0xa0, 0xe8, 0x4c, 0xdc, 0xe9, 0x88, 0x53, 0x84, 0xe3, 0x80, 0xed, 0x43, 0x21,
	0x18, 0x8d, 0x79, 0xa1, 0x49, 0xda, 0x75, 0x5b, 0x2f, 0xd9, 0xbb, 0xb0, 0xf3, 0x42, 0x86, 0x4a,
	0x2e, 0xb8, 0xd1, 0x24, 0x6d, 0xd3, 0x3a, 0xec, 0xac, 0x9f, 0xd6, 0xb9, 0xba, 0x1e, 0x5c, 0x9e,
	0xd9, 0x09, 0x89, 0xb5, 0x80, 0x04, 0xbc, 0x88, 0xcc, 0x83, 0x2d, 0xcc, 0x33, 0x9b, 0x04, 0x3a,
	0x25, 0xe9, 0xcb, 0x70, 0xbc, 0xe4, 0x3b, 0x4d, 0xd2, 0xa6, 0x76, 0x12, 0x31, 0x06, 0x86, 0x27,
	0xa2, 0x88, 0x97, 0x10, 0xc5, 0xb5, 0xe6, 0x3a, 0x13, 0x11, 0x8e, 0x25, 0x2f, 0x63, 0x4e, 0x49,
	0xa4, 0xb9, 0x51, 0xe0, 0xfa, 0xbc, 0xda, 0x24, 0xed, 0xaa, 0x8d, 0x6b, 0xcd, 0x8d, 0x94, 0x50,
	0xf3, 0x88, 0x43, 0xcc, 0x8d, 0x23, 0xc6, 0xa1, 0x74, 0x23, 0x42, 0x67, 0x36, 0x92, 0xdc, 0xc4,
	0x8d, 0x34, 0x64, 0x35, 0xa0, 0xee, 0x88, 0xef, 0xa2, 0x06, 0x75, 0x47, 0xec, 0x4d, 0x30, 0xb5,
	0xd2, 0x30, 0x72, 0x7d, 0xf5, 0xbe, 0xc5, 0x2b, 0xc8, 0x06, 0x0d, 0x5d, 0x20, 0xd2, 0xfa, 0xb9,
	0x00, 0x7b, 0x7d, 0xe1, 0x3c, 0x97, 0xa3, 0xb4, 0xc0, 0x11, 0x63, 0x28, 0xa2, 0xab, 0x5b, 0x3d,
	0xa1, 0xfb, 0x04, 0x85, 0x0e, 0xe2, 0x3a, 0xea, 0xda, 0xd6, 0x11, 0xc4, 0x5a, 0x1e, 0x65, 0x09,
	0x16, 0x32, 0x76, 0x9a, 0xe4, 0xa3, 0xe4, 0xf2, 0x46, 0xb3, 0xd0, 0xa6, 0xb8, 0x13, 0x17, 0x80,
	0x01, 0xed, 0x2f, 0x78, 0x31, 0x43, 0x69, 0x7f, 0x81, 0x98, 0x2e, 0x5e, 0x8e, 0x2d, 0x11, 0xbb,
	0xe3, 0xa5, 0x15, 0xec, 0x8e, 0x3d, 0x81, 0x52, 0xfc, 0xda, 0x5d, 0x5e, 0xce, 0x0e, 0x4c, 0xa1,
	0x7c, 0x57, 0x5f, 0x74, 0x63, 0xd7, 0xd2, 0xb9, 0x62, 0x4b, 0x74, 0x39, 0xe4, 0xb9, 0xc6, 0x48,
	0xb6, 0x67, 0x71, 0x73, 0x63, 0xcf, 0xd2, 0xaa, 0x69, 0xb1, 0x77, 0xb3, 0xdb, 0x67, 0x05, 0xdf,
	0x07, 0x72, 0xc5, 0xab, 0x59, 0x92, 0xe4, 0x4a, 0x23, 0xd7, 0xbc, 0x96, 0x23, 0xd7, 0x1a, 0x19,
	0xf0, 0xbd, 0x1c, 0x19, 0x68, 0xe4, 0x92, 0xef, 0xe7, 0xc8, 0xa5, 0xce, 0xe0, 0x1b, 0xe9, 0x8e,
	0x27, 0x8a, 0xd7, 0x33, 0x38, 0x41, 0xe2, 0xec, 0xb0, 0x65, 0x58, 0x96, 0x40, 0xda, 0x36, 0x47,
	0x59, 0xeb, 0xbd, 0x9a, 0x7f, 0x17, 0x23, 0xad, 0x5f, 0x28, 0xd4, 0xbe, 0x14, 0xa1, 0xeb, 0xab,
	0x7f, 0xd7, 0x3c, 0xbd, 0x97, 0x35, 0x4f, 0xef, 0xa1, 0x79, 0x8c, 0xad, 0xe6, 0x31, 0xfe, 0x9b,
	0xe6, 0xf9, 0xb5, 0x00, 0x87, 0x69, 0x81, 0xff, 0x69, 0x0b, 0x19, 0x5b, 0x2d, 0xc4, 0xb6, 0x58,
	0x88, 0x6d, 0xb1, 0x10, 0xfb, 0x3f, 0x58, 0x88, 0x3d, 0xb0, 0x10, 0x7b, 0x60, 0x21, 0xf6, 0xc0,
	0x42, 0xc6, 0x76, 0x0b, 0x19, 0x7f, 0xd3, 0x42, 0xc6, 0x9a, 0x85, 0xbe, 0x2f, 0xc0, 0xee, 0xf9,
	0xc7, 0x7d, 0x11, 0x0a, 0x4f, 0x2a, 0x19, 0x62, 0x07, 0xfa, 0x73, 0xef, 0x46, 0x86, 0x9c, 0xc4,
	0xdd, 0x1a, 0x47, 0xec, 0x09, 0x54, 0x82, 0x70, 0xe6, 0xc8, 0x28, 0x72, 0xb5, 0x89, 0x48, 0xbb,
	0x68, 0xe7, 0x80, 0xfe, 0x2a, 0x49, 0x4d, 0x7b, 0x29, 0x4f, 0xeb, 0x53, 0xa8, 0xb8, 0xbe, 0x1a,
	0xca, 0x85, 0x0a, 0x05, 0xbe, 0xb2, 0x69, 0xbd, 0xbd, 0xe9, 0x93, 0xd5, 0xe3, 0x3b, 0x3d, 0x5f,
	0x9d, 0x6a, 0xf2, 0xa9, 0xaf, 0xc2, 0xa5, 0x5d, 0x76, 0x93, 0x90, 0x9d, 0x83, 0x79, 0x3b, 0x9d,
	0x89, 0x54, 0xaa, 0x88, 0x52, 0xef, 0xfc, 0xa9, 0xd4, 0x99, 0xe6, 0xaf, 0x88, 0xc1, 0x6d, 0x06,
	0x1c, 0x7d, 0x01, 0xd5, 0xb5, 0x93, 0xf4, 0x24, 0x78, 0x2e, 0x97, 0x78, 0xe7, 0x8a, 0xad, 0x97,
	0xac, 0x03, 0xc5, 0x17, 0x62, 0x3a, 0x97, 0x78, 0x59, 0xd3, 0xe2, 0x9b, 0x67, 0x7d, 0x14, 0x86,
	0x62, 0xd9, 0xf3, 0x95, 0x1d, 0xd3, 0x3e, 0xa0, 0xcf, 0xc8, 0xd1, 0x00, 0xf6, 0x36, 0x4e, 0xdd,
	0x22, 0xdc, 0x5d, 0x17, 0x7e, 0x7d, 0xab, 0xf0, 0x27, 0xb3, 0xf9, 0xcd, 0x54, 0xae, 0x68, 0xb7,
	0x9a, 0x50, 0x4e, 0x8f, 0xd4, 0xd3, 0x2c, 0x96, 0xd0, 0x06, 0xac, 0x27, 0xac, 0xd6, 0x5b, 0x60,
	0xae, 0x7c, 0xbb, 0x4e, 0x22, 0x29, 0xe9, 0x3b, 0x0a, 0xf5, 0xfe, 0x52, 0x4d, 0x5c, 0xf1, 0x6c,
	0xe5, 0xd5, 0xdf, 0x00, 0x88, 0x5f, 0x6c, 0x18, 0xcd, 0x3d, 0x4c, 0x96, 0xd8, 0x95, 0x18, 0xb9,
	0x98, 0x7b, 0xec, 0x29, 0xd4, 0x3c, 0x19, 0x8e, 0x5d, 0x7f, 0x3c, 0x4c, 0x9e, 0x99, 0x22, 0xa5,
	0x9a, 0xa0, 0x5f, 0xc5, 0xaf, 0x7d, 0x08, 0x3b, 0x81, 0x1a, 0x4e, 0x44, 0xda, 0x05, 0xc5, 0x40,
	0x7d, 0x26, 0x14, 0x7b, 0x0d, 0xca, 0x62, 0x1a, 0x4c, 0xc4, 0x50, 0x7a, 0x38, 0x55, 0x89, 0x5d,
	0xc2, 0xf8, 0xd4, 0x63, 0x8f, 0x21, 0x5e, 0x0e, 0x23, 0x9c, 0xa2, 0xc4, 0xde, 0xc1, 0xf0, 0x82,
	0x35, 0xc0, 0x8c, 0x1c, 0x31, 0x95, 0xc3, 0xaf, 0x87, 0xb7, 0xc2, 0xc1, 0xc9, 0x49, 0xec, 0x0a,
	0x42, 0x9f, 0x9f, 0x09, 0x67, 0xa5, 0xe1, 0x4a, 0x6b, 0x0d, 0x57, 0x03, 0xba, 0xe8, 0xe2, 0xf0,
	0x24, 0x36, 0x5d, 0x74, 0x31, 0x8e, 0x27, 0x9b, 0x8e, 0x2d, 0xfd, 0x1c, 0x2e, 0xda, 0x5b, 0xf7,
	0xb6, 0x5e, 0xc6, 0x88, 0x85, 0xa3, 0x12, 0x11, 0xab, 0xf5, 0x21, 0x14, 0xf1, 0x17, 0x89, 0xed,
	0x02, 0x59, 0x60, 0x31, 0xa8, 0x4d, 0x16, 0x3a, 0x5a, 0xe2, 0xbd, 0xa9, 0x4d, 0x96, 0x3a, 0xba,
	0xc3, 0x6b, 0x52, 0x9b, 0xdc, 0xe9, 0x48, 0xe1, 0xdd, 0xa8, 0x4d, 0x54, 0x2a, 0xd0, 0xcb, 0x05,
	0xd8, 0x9a, 0x00, 0x5b, 0x13, 0x60, 0x6b, 0x02, 0x86, 0x16, 0x78, 0x0f, 0x0c, 0xfd, 0xeb, 0xf5,
	0xf2, 0x09, 0x24, 0x5f, 0xfc, 0x85, 0x13, 0x4f, 0x9e, 0xfe, 0x70, 0xdf, 0x20, 0x3f, 0xde, 0x37,
	0xc8, 0x6f, 0xf7, 0x0d, 0xf2, 0xed, 0xef, 0x8d, 0x57, 0xc0, 0x5c, 0x69, 0xc4, 0x13, 0x7a, 0xee,
	0x0c, 0xa8, 0xe7, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x66, 0x5d, 0x47, 0x5e, 0xc4, 0x0a, 0x00,
	0x00,
}

func (m *Particle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Particle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Particle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Spin != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Spin))
		i--
		dAtA[i] = 0x68
	}
	if m.Id != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x60
	}
	if m.Barcode != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Barcode)<<1)^uint32((*m.Barcode>>31))))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Status)<<1)^uint32((*m.Status>>31))))
		i--
		dAtA[i] = 0x50
	}
	if m.SpinSint32 != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.SpinSint32)<<1)^uint32((*m.SpinSint32>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.Charge != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Charge)<<1)^uint32((*m.Charge>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.Mass != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Mass))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Energy != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Energy))))
		i--
		dAtA[i] = 0x35
	}
	if m.P != nil {
		{
			size, err := m.P.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Vertex != nil {
		{
			size, err := m.Vertex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Pdg != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Pdg)<<1)^uint32((*m.Pdg>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Child) > 0 {
		for iNdEx := len(m.Child) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintMc(dAtA, i, uint64(m.Child[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.Parent) > 0 {
		for iNdEx := len(m.Parent) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintMc(dAtA, i, uint64(m.Parent[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *PackedParticles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackedParticles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackedParticles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Energy) > 0 {
		for iNdEx := len(m.Energy) - 1; iNdEx >= 0; iNdEx-- {
			f3 := math.Float32bits(float32(m.Energy[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f3))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Energy)*4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Charge) > 0 {
		dAtA4 := make([]byte, len(m.Charge)*5)
		var j5 int
		for _, num := range m.Charge {
			x6 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x6 >= 1<<7 {
				dAtA4[j5] = uint8(uint64(x6)&0x7f | 0x80)
				j5++
				x6 >>= 7
			}
			dAtA4[j5] = uint8(x6)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA4[:j5])
		i = encodeVarintMc(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Weight) > 0 {
		for iNdEx := len(m.Weight) - 1; iNdEx >= 0; iNdEx-- {
			f7 := math.Float32bits(float32(m.Weight[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f7))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Weight)*4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.T) > 0 {
		for iNdEx := len(m.T) - 1; iNdEx >= 0; iNdEx-- {
			f8 := math.Float32bits(float32(m.T[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f8))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.T)*4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Z) > 0 {
		for iNdEx := len(m.Z) - 1; iNdEx >= 0; iNdEx-- {
			f9 := math.Float32bits(float32(m.Z[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f9))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Z)*4))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Y) > 0 {
		for iNdEx := len(m.Y) - 1; iNdEx >= 0; iNdEx-- {
			f10 := math.Float32bits(float32(m.Y[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f10))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Y)*4))
		i--
		dAtA[i] = 0x72
	}
	if len(m.X) > 0 {
		for iNdEx := len(m.X) - 1; iNdEx >= 0; iNdEx-- {
			f11 := math.Float32bits(float32(m.X[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f11))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.X)*4))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Barcode) > 0 {
		dAtA12 := make([]byte, len(m.Barcode)*5)
		var j13 int
		for _, num := range m.Barcode {
			x14 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x14 >= 1<<7 {
				dAtA12[j13] = uint8(uint64(x14)&0x7f | 0x80)
				j13++
				x14 >>= 7
			}
			dAtA12[j13] = uint8(x14)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA12[:j13])
		i = encodeVarintMc(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Child2) > 0 {
		dAtA16 := make([]byte, len(m.Child2)*10)
		var j15 int
		for _, num := range m.Child2 {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintMc(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Child1) > 0 {
		dAtA18 := make([]byte, len(m.Child1)*10)
		var j17 int
		for _, num := range m.Child1 {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintMc(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Parent2) > 0 {
		dAtA20 := make([]byte, len(m.Parent2)*10)
		var j19 int
		for _, num := range m.Parent2 {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintMc(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Parent1) > 0 {
		dAtA22 := make([]byte, len(m.Parent1)*10)
		var j21 int
		for _, num := range m.Parent1 {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintMc(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Pz) > 0 {
		for iNdEx := len(m.Pz) - 1; iNdEx >= 0; iNdEx-- {
			f23 := math.Float32bits(float32(m.Pz[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f23))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Pz)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Py) > 0 {
		for iNdEx := len(m.Py) - 1; iNdEx >= 0; iNdEx-- {
			f24 := math.Float32bits(float32(m.Py[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f24))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Py)*4))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Px) > 0 {
		for iNdEx := len(m.Px) - 1; iNdEx >= 0; iNdEx-- {
			f25 := math.Float32bits(float32(m.Px[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f25))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Px)*4))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mass) > 0 {
		for iNdEx := len(m.Mass) - 1; iNdEx >= 0; iNdEx-- {
			f26 := math.Float32bits(float32(m.Mass[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f26))
		}
		i = encodeVarintMc(dAtA, i, uint64(len(m.Mass)*4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		dAtA28 := make([]byte, len(m.Status)*10)
		var j27 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintMc(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pdg) > 0 {
		dAtA29 := make([]byte, len(m.Pdg)*5)
		var j30 int
		for _, num := range m.Pdg {
			x31 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x31 >= 1<<7 {
				dAtA29[j30] = uint8(uint64(x31)&0x7f | 0x80)
				j30++
				x31 >>= 7
			}
			dAtA29[j30] = uint8(x31)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA29[:j30])
		i = encodeVarintMc(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		dAtA33 := make([]byte, len(m.Id)*10)
		var j32 int
		for _, num := range m.Id {
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		i -= j32
		copy(dAtA[i:], dAtA33[:j32])
		i = encodeVarintMc(dAtA, i, uint64(j32))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VarintParticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VarintParticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VarintParticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Spin != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Spin))
		i--
		dAtA[i] = 0x68
	}
	if m.Id != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x60
	}
	if m.Barcode != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Barcode)<<1)^uint32((*m.Barcode>>31))))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Status)<<1)^uint32((*m.Status>>31))))
		i--
		dAtA[i] = 0x50
	}
	if m.SpinSint32 != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.SpinSint32)<<1)^uint32((*m.SpinSint32>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.Charge != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Charge)<<1)^uint32((*m.Charge>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.Mass != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Mass))
		i--
		dAtA[i] = 0x38
	}
	if m.Energy != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Energy))
		i--
		dAtA[i] = 0x30
	}
	if m.P != nil {
		{
			size, err := m.P.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Vertex != nil {
		{
			size, err := m.Vertex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Pdg != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint32(*m.Pdg)<<1)^uint32((*m.Pdg>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Child) > 0 {
		for iNdEx := len(m.Child) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintMc(dAtA, i, uint64(m.Child[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.Parent) > 0 {
		for iNdEx := len(m.Parent) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintMc(dAtA, i, uint64(m.Parent[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *VarintPackedParticles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VarintPackedParticles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VarintPackedParticles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Energy) > 0 {
		dAtA37 := make([]byte, len(m.Energy)*10)
		var j36 int
		for _, num := range m.Energy {
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		i -= j36
		copy(dAtA[i:], dAtA37[:j36])
		i = encodeVarintMc(dAtA, i, uint64(j36))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Charge) > 0 {
		dAtA38 := make([]byte, len(m.Charge)*5)
		var j39 int
		for _, num := range m.Charge {
			x40 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x40 >= 1<<7 {
				dAtA38[j39] = uint8(uint64(x40)&0x7f | 0x80)
				j39++
				x40 >>= 7
			}
			dAtA38[j39] = uint8(x40)
			j39++
		}
		i -= j39
		copy(dAtA[i:], dAtA38[:j39])
		i = encodeVarintMc(dAtA, i, uint64(j39))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Weight) > 0 {
		dAtA42 := make([]byte, len(m.Weight)*10)
		var j41 int
		for _, num := range m.Weight {
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		i -= j41
		copy(dAtA[i:], dAtA42[:j41])
		i = encodeVarintMc(dAtA, i, uint64(j41))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.T) > 0 {
		dAtA44 := make([]byte, len(m.T)*10)
		var j43 int
		for _, num := range m.T {
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		i -= j43
		copy(dAtA[i:], dAtA44[:j43])
		i = encodeVarintMc(dAtA, i, uint64(j43))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Z) > 0 {
		var j45 int
		dAtA47 := make([]byte, len(m.Z)*10)
		for _, num := range m.Z {
			x46 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x46 >= 1<<7 {
				dAtA47[j45] = uint8(uint64(x46)&0x7f | 0x80)
				j45++
				x46 >>= 7
			}
			dAtA47[j45] = uint8(x46)
			j45++
		}
		i -= j45
		copy(dAtA[i:], dAtA47[:j45])
		i = encodeVarintMc(dAtA, i, uint64(j45))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Y) > 0 {
		var j48 int
		dAtA50 := make([]byte, len(m.Y)*10)
		for _, num := range m.Y {
			x49 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x49 >= 1<<7 {
				dAtA50[j48] = uint8(uint64(x49)&0x7f | 0x80)
				j48++
				x49 >>= 7
			}
			dAtA50[j48] = uint8(x49)
			j48++
		}
		i -= j48
		copy(dAtA[i:], dAtA50[:j48])
		i = encodeVarintMc(dAtA, i, uint64(j48))
		i--
		dAtA[i] = 0x72
	}
	if len(m.X) > 0 {
		var j51 int
		dAtA53 := make([]byte, len(m.X)*10)
		for _, num := range m.X {
			x52 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x52 >= 1<<7 {
				dAtA53[j51] = uint8(uint64(x52)&0x7f | 0x80)
				j51++
				x52 >>= 7
			}
			dAtA53[j51] = uint8(x52)
			j51++
		}
		i -= j51
		copy(dAtA[i:], dAtA53[:j51])
		i = encodeVarintMc(dAtA, i, uint64(j51))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Barcode) > 0 {
		dAtA54 := make([]byte, len(m.Barcode)*5)
		var j55 int
		for _, num := range m.Barcode {
			x56 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x56 >= 1<<7 {
				dAtA54[j55] = uint8(uint64(x56)&0x7f | 0x80)
				j55++
				x56 >>= 7
			}
			dAtA54[j55] = uint8(x56)
			j55++
		}
		i -= j55
		copy(dAtA[i:], dAtA54[:j55])
		i = encodeVarintMc(dAtA, i, uint64(j55))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Child2) > 0 {
		dAtA58 := make([]byte, len(m.Child2)*10)
		var j57 int
		for _, num := range m.Child2 {
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		i -= j57
		copy(dAtA[i:], dAtA58[:j57])
		i = encodeVarintMc(dAtA, i, uint64(j57))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Child1) > 0 {
		dAtA60 := make([]byte, len(m.Child1)*10)
		var j59 int
		for _, num := range m.Child1 {
			for num >= 1<<7 {
				dAtA60[j59] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j59++
			}
			dAtA60[j59] = uint8(num)
			j59++
		}
		i -= j59
		copy(dAtA[i:], dAtA60[:j59])
		i = encodeVarintMc(dAtA, i, uint64(j59))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Parent2) > 0 {
		dAtA62 := make([]byte, len(m.Parent2)*10)
		var j61 int
		for _, num := range m.Parent2 {
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		i -= j61
		copy(dAtA[i:], dAtA62[:j61])
		i = encodeVarintMc(dAtA, i, uint64(j61))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Parent1) > 0 {
		dAtA64 := make([]byte, len(m.Parent1)*10)
		var j63 int
		for _, num := range m.Parent1 {
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		i -= j63
		copy(dAtA[i:], dAtA64[:j63])
		i = encodeVarintMc(dAtA, i, uint64(j63))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Pz) > 0 {
		var j65 int
		dAtA67 := make([]byte, len(m.Pz)*10)
		for _, num := range m.Pz {
			x66 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x66 >= 1<<7 {
				dAtA67[j65] = uint8(uint64(x66)&0x7f | 0x80)
				j65++
				x66 >>= 7
			}
			dAtA67[j65] = uint8(x66)
			j65++
		}
		i -= j65
		copy(dAtA[i:], dAtA67[:j65])
		i = encodeVarintMc(dAtA, i, uint64(j65))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Py) > 0 {
		var j68 int
		dAtA70 := make([]byte, len(m.Py)*10)
		for _, num := range m.Py {
			x69 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x69 >= 1<<7 {
				dAtA70[j68] = uint8(uint64(x69)&0x7f | 0x80)
				j68++
				x69 >>= 7
			}
			dAtA70[j68] = uint8(x69)
			j68++
		}
		i -= j68
		copy(dAtA[i:], dAtA70[:j68])
		i = encodeVarintMc(dAtA, i, uint64(j68))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Px) > 0 {
		var j71 int
		dAtA73 := make([]byte, len(m.Px)*10)
		for _, num := range m.Px {
			x72 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x72 >= 1<<7 {
				dAtA73[j71] = uint8(uint64(x72)&0x7f | 0x80)
				j71++
				x72 >>= 7
			}
			dAtA73[j71] = uint8(x72)
			j71++
		}
		i -= j71
		copy(dAtA[i:], dAtA73[:j71])
		i = encodeVarintMc(dAtA, i, uint64(j71))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mass) > 0 {
		dAtA75 := make([]byte, len(m.Mass)*10)
		var j74 int
		for _, num := range m.Mass {
			for num >= 1<<7 {
				dAtA75[j74] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j74++
			}
			dAtA75[j74] = uint8(num)
			j74++
		}
		i -= j74
		copy(dAtA[i:], dAtA75[:j74])
		i = encodeVarintMc(dAtA, i, uint64(j74))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		dAtA77 := make([]byte, len(m.Status)*10)
		var j76 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA77[j76] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j76++
			}
			dAtA77[j76] = uint8(num)
			j76++
		}
		i -= j76
		copy(dAtA[i:], dAtA77[:j76])
		i = encodeVarintMc(dAtA, i, uint64(j76))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pdg) > 0 {
		dAtA78 := make([]byte, len(m.Pdg)*5)
		var j79 int
		for _, num := range m.Pdg {
			x80 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x80 >= 1<<7 {
				dAtA78[j79] = uint8(uint64(x80)&0x7f | 0x80)
				j79++
				x80 >>= 7
			}
			dAtA78[j79] = uint8(x80)
			j79++
		}
		i -= j79
		copy(dAtA[i:], dAtA78[:j79])
		i = encodeVarintMc(dAtA, i, uint64(j79))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		dAtA82 := make([]byte, len(m.Id)*10)
		var j81 int
		for _, num := range m.Id {
			for num >= 1<<7 {
				dAtA82[j81] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j81++
			}
			dAtA82[j81] = uint8(num)
			j81++
		}
		i -= j81
		copy(dAtA[i:], dAtA82[:j81])
		i = encodeVarintMc(dAtA, i, uint64(j81))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MCParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MCParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MCParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FloatExtra) > 0 {
		for k := range m.FloatExtra {
			v := m.FloatExtra[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.IntExtra) > 0 {
		for k := range m.IntExtra {
			v := m.IntExtra[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Weight != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Weight))))
		i--
		dAtA[i] = 0x19
	}
	if m.Processid != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Processid))
		i--
		dAtA[i] = 0x10
	}
	if m.Number != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArrayInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArrayInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArrayInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			x85 := (uint32(m.Value[iNdEx]) << 1) ^ uint32((m.Value[iNdEx] >> 31))
			i = encodeVarintMc(dAtA, i, uint64(x85))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArrayDouble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArrayDouble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArrayDouble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			f86 := math.Float64bits(float64(m.Value[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f86))
			i--
			dAtA[i] = 0x9
		}
	}
	return len(dAtA) - i, nil
}

func (m *Pythia8Parameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pythia8Parameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pythia8Parameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id2 != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Id2))
		i--
		dAtA[i] = 0x58
	}
	if m.Id1 != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.Id1))
		i--
		dAtA[i] = 0x50
	}
	if m.X2 != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.X2))))
		i--
		dAtA[i] = 0x49
	}
	if m.X1 != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.X1))))
		i--
		dAtA[i] = 0x41
	}
	if m.Weight != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Weight))))
		i--
		dAtA[i] = 0x39
	}
	if m.ScaleQFac != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.ScaleQFac))))
		i--
		dAtA[i] = 0x31
	}
	if m.AlphaS != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.AlphaS))))
		i--
		dAtA[i] = 0x29
	}
	if m.AlphaEm != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.AlphaEm))))
		i--
		dAtA[i] = 0x21
	}
	if m.PtHat != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PtHat))))
		i--
		dAtA[i] = 0x19
	}
	if m.MergingWeight != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.MergingWeight))))
		i--
		dAtA[i] = 0x11
	}
	if m.WeightSum != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.WeightSum))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *XYZTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZTF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.T != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.T))))
		i--
		dAtA[i] = 0x25
	}
	if m.Z != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Z))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *XYZTI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZTI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.T != nil {
		i = encodeVarintMc(dAtA, i, uint64(*m.T))
		i--
		dAtA[i] = 0x20
	}
	if m.Z != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint64(*m.Z)<<1)^uint64((*m.Z>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint64(*m.Y)<<1)^uint64((*m.Y>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.X != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint64(*m.X)<<1)^uint64((*m.X>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XYZF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Z != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Z))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *XYZI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XYZI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Z != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint64(*m.Z)<<1)^uint64((*m.Z>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint64(*m.Y)<<1)^uint64((*m.Y>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.X != nil {
		i = encodeVarintMc(dAtA, i, uint64((uint64(*m.X)<<1)^uint64((*m.X>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMc(dAtA []byte, offset int, v uint64) int {
	offset -= sovMc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Particle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parent) > 0 {
		for _, e := range m.Parent {
			n += 1 + sovMc(uint64(e))
		}
	}
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			n += 1 + sovMc(uint64(e))
		}
	}
	if m.Pdg != nil {
		n += 1 + sozMc(uint64(*m.Pdg))
	}
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovMc(uint64(l))
	}
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovMc(uint64(l))
	}
	if m.Energy != nil {
		n += 5
	}
	if m.Mass != nil {
		n += 5
	}
	if m.Charge != nil {
		n += 1 + sozMc(uint64(*m.Charge))
	}
	if m.SpinSint32 != nil {
		n += 1 + sozMc(uint64(*m.SpinSint32))
	}
	if m.Status != nil {
		n += 1 + sozMc(uint64(*m.Status))
	}
	if m.Barcode != nil {
		n += 1 + sozMc(uint64(*m.Barcode))
	}
	if m.Id != nil {
		n += 1 + sovMc(uint64(*m.Id))
	}
	if m.Spin != nil {
		n += 1 + sovMc(uint64(*m.Spin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackedParticles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Pdg) > 0 {
		l = 0
		for _, e := range m.Pdg {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Mass) > 0 {
		n += 1 + sovMc(uint64(len(m.Mass)*4)) + len(m.Mass)*4
	}
	if len(m.Px) > 0 {
		n += 1 + sovMc(uint64(len(m.Px)*4)) + len(m.Px)*4
	}
	if len(m.Py) > 0 {
		n += 1 + sovMc(uint64(len(m.Py)*4)) + len(m.Py)*4
	}
	if len(m.Pz) > 0 {
		n += 1 + sovMc(uint64(len(m.Pz)*4)) + len(m.Pz)*4
	}
	if len(m.Parent1) > 0 {
		l = 0
		for _, e := range m.Parent1 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Parent2) > 0 {
		l = 0
		for _, e := range m.Parent2 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Child1) > 0 {
		l = 0
		for _, e := range m.Child1 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Child2) > 0 {
		l = 0
		for _, e := range m.Child2 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Barcode) > 0 {
		l = 0
		for _, e := range m.Barcode {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.X) > 0 {
		n += 1 + sovMc(uint64(len(m.X)*4)) + len(m.X)*4
	}
	if len(m.Y) > 0 {
		n += 1 + sovMc(uint64(len(m.Y)*4)) + len(m.Y)*4
	}
	if len(m.Z) > 0 {
		n += 1 + sovMc(uint64(len(m.Z)*4)) + len(m.Z)*4
	}
	if len(m.T) > 0 {
		n += 2 + sovMc(uint64(len(m.T)*4)) + len(m.T)*4
	}
	if len(m.Weight) > 0 {
		n += 2 + sovMc(uint64(len(m.Weight)*4)) + len(m.Weight)*4
	}
	if len(m.Charge) > 0 {
		l = 0
		for _, e := range m.Charge {
			l += sozMc(uint64(e))
		}
		n += 2 + sovMc(uint64(l)) + l
	}
	if len(m.Energy) > 0 {
		n += 2 + sovMc(uint64(len(m.Energy)*4)) + len(m.Energy)*4
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VarintParticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parent) > 0 {
		for _, e := range m.Parent {
			n += 1 + sovMc(uint64(e))
		}
	}
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			n += 1 + sovMc(uint64(e))
		}
	}
	if m.Pdg != nil {
		n += 1 + sozMc(uint64(*m.Pdg))
	}
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovMc(uint64(l))
	}
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovMc(uint64(l))
	}
	if m.Energy != nil {
		n += 1 + sovMc(uint64(*m.Energy))
	}
	if m.Mass != nil {
		n += 1 + sovMc(uint64(*m.Mass))
	}
	if m.Charge != nil {
		n += 1 + sozMc(uint64(*m.Charge))
	}
	if m.SpinSint32 != nil {
		n += 1 + sozMc(uint64(*m.SpinSint32))
	}
	if m.Status != nil {
		n += 1 + sozMc(uint64(*m.Status))
	}
	if m.Barcode != nil {
		n += 1 + sozMc(uint64(*m.Barcode))
	}
	if m.Id != nil {
		n += 1 + sovMc(uint64(*m.Id))
	}
	if m.Spin != nil {
		n += 1 + sovMc(uint64(*m.Spin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VarintPackedParticles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Pdg) > 0 {
		l = 0
		for _, e := range m.Pdg {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Mass) > 0 {
		l = 0
		for _, e := range m.Mass {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Px) > 0 {
		l = 0
		for _, e := range m.Px {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Py) > 0 {
		l = 0
		for _, e := range m.Py {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Pz) > 0 {
		l = 0
		for _, e := range m.Pz {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Parent1) > 0 {
		l = 0
		for _, e := range m.Parent1 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Parent2) > 0 {
		l = 0
		for _, e := range m.Parent2 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Child1) > 0 {
		l = 0
		for _, e := range m.Child1 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Child2) > 0 {
		l = 0
		for _, e := range m.Child2 {
			l += sovMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Barcode) > 0 {
		l = 0
		for _, e := range m.Barcode {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.X) > 0 {
		l = 0
		for _, e := range m.X {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Y) > 0 {
		l = 0
		for _, e := range m.Y {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.Z) > 0 {
		l = 0
		for _, e := range m.Z {
			l += sozMc(uint64(e))
		}
		n += 1 + sovMc(uint64(l)) + l
	}
	if len(m.T) > 0 {
		l = 0
		for _, e := range m.T {
			l += sovMc(uint64(e))
		}
		n += 2 + sovMc(uint64(l)) + l
	}
	if len(m.Weight) > 0 {
		l = 0
		for _, e := range m.Weight {
			l += sovMc(uint64(e))
		}
		n += 2 + sovMc(uint64(l)) + l
	}
	if len(m.Charge) > 0 {
		l = 0
		for _, e := range m.Charge {
			l += sozMc(uint64(e))
		}
		n += 2 + sovMc(uint64(l)) + l
	}
	if len(m.Energy) > 0 {
		l = 0
		for _, e := range m.Energy {
			l += sovMc(uint64(e))
		}
		n += 2 + sovMc(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MCParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != nil {
		n += 1 + sovMc(uint64(*m.Number))
	}
	if m.Processid != nil {
		n += 1 + sovMc(uint64(*m.Processid))
	}
	if m.Weight != nil {
		n += 9
	}
	if len(m.IntExtra) > 0 {
		for k, v := range m.IntExtra {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMc(uint64(mapEntrySize))
		}
	}
	if len(m.FloatExtra) > 0 {
		for k, v := range m.FloatExtra {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMc(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArrayInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			n += 1 + sozMc(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArrayDouble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		n += 9 * len(m.Value)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Pythia8Parameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WeightSum != nil {
		n += 9
	}
	if m.MergingWeight != nil {
		n += 9
	}
	if m.PtHat != nil {
		n += 9
	}
	if m.AlphaEm != nil {
		n += 9
	}
	if m.AlphaS != nil {
		n += 9
	}
	if m.ScaleQFac != nil {
		n += 9
	}
	if m.Weight != nil {
		n += 9
	}
	if m.X1 != nil {
		n += 9
	}
	if m.X2 != nil {
		n += 9
	}
	if m.Id1 != nil {
		n += 1 + sovMc(uint64(*m.Id1))
	}
	if m.Id2 != nil {
		n += 1 + sovMc(uint64(*m.Id2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZTF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 5
	}
	if m.Y != nil {
		n += 5
	}
	if m.Z != nil {
		n += 5
	}
	if m.T != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZTI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 1 + sozMc(uint64(*m.X))
	}
	if m.Y != nil {
		n += 1 + sozMc(uint64(*m.Y))
	}
	if m.Z != nil {
		n += 1 + sozMc(uint64(*m.Z))
	}
	if m.T != nil {
		n += 1 + sovMc(uint64(*m.T))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 5
	}
	if m.Y != nil {
		n += 5
	}
	if m.Z != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XYZI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 1 + sozMc(uint64(*m.X))
	}
	if m.Y != nil {
		n += 1 + sozMc(uint64(*m.Y))
	}
	if m.Z != nil {
		n += 1 + sozMc(uint64(*m.Z))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMc(x uint64) (n int) {
	return sovMc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Particle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Particle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Particle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent = append(m.Parent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent) == 0 {
					m.Parent = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent = append(m.Parent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child = append(m.Child, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child) == 0 {
					m.Child = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child = append(m.Child, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pdg = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &XYZTF{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P == nil {
				m.P = &XYZF{}
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Energy = &v2
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Mass = &v2
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Charge = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpinSint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SpinSint32 = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Barcode = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spin", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackedParticles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackedParticles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackedParticles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Pdg = append(m.Pdg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pdg) == 0 {
					m.Pdg = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Pdg = append(m.Pdg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Mass = append(m.Mass, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Mass) == 0 {
					m.Mass = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Mass = append(m.Mass, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
		case 5:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Px = append(m.Px, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Px) == 0 {
					m.Px = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Px = append(m.Px, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Py = append(m.Py, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Py) == 0 {
					m.Py = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Py = append(m.Py, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Pz = append(m.Pz, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Pz) == 0 {
					m.Pz = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Pz = append(m.Pz, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pz", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent1 = append(m.Parent1, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent1) == 0 {
					m.Parent1 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent1 = append(m.Parent1, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent1", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent2 = append(m.Parent2, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent2) == 0 {
					m.Parent2 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent2 = append(m.Parent2, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent2", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child1 = append(m.Child1, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child1) == 0 {
					m.Child1 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child1 = append(m.Child1, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child1", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child2 = append(m.Child2, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child2) == 0 {
					m.Child2 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child2 = append(m.Child2, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child2", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Barcode = append(m.Barcode, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Barcode) == 0 {
					m.Barcode = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Barcode = append(m.Barcode, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
		case 13:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.X = append(m.X, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.X) == 0 {
					m.X = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.X = append(m.X, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
		case 14:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Y = append(m.Y, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Y) == 0 {
					m.Y = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Y = append(m.Y, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
		case 15:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Z = append(m.Z, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Z) == 0 {
					m.Z = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Z = append(m.Z, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
		case 16:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.T = append(m.T, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.T) == 0 {
					m.T = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.T = append(m.T, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
		case 17:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Weight = append(m.Weight, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Weight) == 0 {
					m.Weight = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Weight = append(m.Weight, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Charge = append(m.Charge, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Charge) == 0 {
					m.Charge = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Charge = append(m.Charge, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
		case 19:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Energy = append(m.Energy, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Energy) == 0 {
					m.Energy = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Energy = append(m.Energy, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VarintParticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VarintParticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VarintParticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent = append(m.Parent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent) == 0 {
					m.Parent = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent = append(m.Parent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child = append(m.Child, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child) == 0 {
					m.Child = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child = append(m.Child, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pdg = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &XYZTI{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P == nil {
				m.P = &XYZI{}
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Energy = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mass = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Charge = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpinSint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SpinSint32 = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Barcode = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spin", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VarintPackedParticles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VarintPackedParticles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VarintPackedParticles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Pdg = append(m.Pdg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pdg) == 0 {
					m.Pdg = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Pdg = append(m.Pdg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mass = append(m.Mass, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mass) == 0 {
					m.Mass = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mass = append(m.Mass, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Px = append(m.Px, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Px) == 0 {
					m.Px = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Px = append(m.Px, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Py = append(m.Py, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Py) == 0 {
					m.Py = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Py = append(m.Py, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Pz = append(m.Pz, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pz) == 0 {
					m.Pz = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Pz = append(m.Pz, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pz", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent1 = append(m.Parent1, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent1) == 0 {
					m.Parent1 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent1 = append(m.Parent1, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent1", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent2 = append(m.Parent2, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Parent2) == 0 {
					m.Parent2 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent2 = append(m.Parent2, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent2", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child1 = append(m.Child1, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child1) == 0 {
					m.Child1 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child1 = append(m.Child1, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child1", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child2 = append(m.Child2, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Child2) == 0 {
					m.Child2 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child2 = append(m.Child2, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child2", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Barcode = append(m.Barcode, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Barcode) == 0 {
					m.Barcode = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Barcode = append(m.Barcode, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
		case 13:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.X = append(m.X, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.X) == 0 {
					m.X = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.X = append(m.X, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
		case 14:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Y = append(m.Y, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Y) == 0 {
					m.Y = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Y = append(m.Y, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
		case 15:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Z = append(m.Z, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Z) == 0 {
					m.Z = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Z = append(m.Z, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
		case 16:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.T = append(m.T, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.T) == 0 {
					m.T = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.T = append(m.T, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
		case 17:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Weight = append(m.Weight, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Weight) == 0 {
					m.Weight = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Weight = append(m.Weight, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Charge = append(m.Charge, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Charge) == 0 {
					m.Charge = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Charge = append(m.Charge, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
		case 19:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Energy = append(m.Energy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Energy) == 0 {
					m.Energy = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Energy = append(m.Energy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MCParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MCParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MCParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Number = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processid = &v
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Weight = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntExtra == nil {
				m.IntExtra = make(map[string]*ArrayInt)
			}
			var mapkey string
			var mapvalue *ArrayInt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArrayInt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IntExtra[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FloatExtra == nil {
				m.FloatExtra = make(map[string]*ArrayDouble)
			}
			var mapkey string
			var mapvalue *ArrayDouble
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArrayDouble{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FloatExtra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArrayInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArrayInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArrayInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArrayDouble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArrayDouble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArrayDouble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pythia8Parameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pythia8Parameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pythia8Parameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightSum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.WeightSum = &v2
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergingWeight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.MergingWeight = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtHat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PtHat = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaEm", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.AlphaEm = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaS", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.AlphaS = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleQFac", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.ScaleQFac = &v2
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Weight = &v2
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.X1 = &v2
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.X2 = &v2
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id1 = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id2", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id2 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.X = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Z = &v2
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.T = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.X = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Y = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Z = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.T = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.X = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Y = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Z = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.X = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Y = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Z = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipMc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMc = fmt.Errorf("proto: unexpected end of group")
)
