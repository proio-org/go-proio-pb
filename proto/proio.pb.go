// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/proto/proio.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BucketHeader_CompType int32

const (
	BucketHeader_NONE BucketHeader_CompType = 0
	BucketHeader_GZIP BucketHeader_CompType = 1
	BucketHeader_LZ4  BucketHeader_CompType = 2
)

var BucketHeader_CompType_name = map[int32]string{
	0: "NONE",
	1: "GZIP",
	2: "LZ4",
}
var BucketHeader_CompType_value = map[string]int32{
	"NONE": 0,
	"GZIP": 1,
	"LZ4":  2,
}

func (x BucketHeader_CompType) String() string {
	return proto.EnumName(BucketHeader_CompType_name, int32(x))
}
func (BucketHeader_CompType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_proio_85dbe7ee00e34bef, []int{0, 0}
}

type BucketHeader_BucketType int32

const (
	BucketHeader_EVENTS BucketHeader_BucketType = 0
	BucketHeader_FOOTER BucketHeader_BucketType = 1
)

var BucketHeader_BucketType_name = map[int32]string{
	0: "EVENTS",
	1: "FOOTER",
}
var BucketHeader_BucketType_value = map[string]int32{
	"EVENTS": 0,
	"FOOTER": 1,
}

func (x BucketHeader_BucketType) String() string {
	return proto.EnumName(BucketHeader_BucketType_name, int32(x))
}
func (BucketHeader_BucketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_proio_85dbe7ee00e34bef, []int{0, 1}
}

type BucketHeader struct {
	NEvents              uint64                  `protobuf:"varint,1,opt,name=nEvents,proto3" json:"nEvents,omitempty"`
	BucketSize           uint64                  `protobuf:"varint,2,opt,name=bucketSize,proto3" json:"bucketSize,omitempty"`
	Compression          BucketHeader_CompType   `protobuf:"varint,3,opt,name=compression,proto3,enum=proto.BucketHeader_CompType" json:"compression,omitempty"`
	Type                 BucketHeader_BucketType `protobuf:"varint,4,opt,name=type,proto3,enum=proto.BucketHeader_BucketType" json:"type,omitempty"`
	FileDescriptor       [][]byte                `protobuf:"bytes,5,rep,name=fileDescriptor" json:"fileDescriptor,omitempty"`
	Metadata             map[string][]byte       `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BucketHeader) Reset()         { *m = BucketHeader{} }
func (m *BucketHeader) String() string { return proto.CompactTextString(m) }
func (*BucketHeader) ProtoMessage()    {}
func (*BucketHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_proio_85dbe7ee00e34bef, []int{0}
}
func (m *BucketHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BucketHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketHeader.Merge(dst, src)
}
func (m *BucketHeader) XXX_Size() int {
	return m.Size()
}
func (m *BucketHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BucketHeader proto.InternalMessageInfo

func (m *BucketHeader) GetNEvents() uint64 {
	if m != nil {
		return m.NEvents
	}
	return 0
}

func (m *BucketHeader) GetBucketSize() uint64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *BucketHeader) GetCompression() BucketHeader_CompType {
	if m != nil {
		return m.Compression
	}
	return BucketHeader_NONE
}

func (m *BucketHeader) GetType() BucketHeader_BucketType {
	if m != nil {
		return m.Type
	}
	return BucketHeader_EVENTS
}

func (m *BucketHeader) GetFileDescriptor() [][]byte {
	if m != nil {
		return m.FileDescriptor
	}
	return nil
}

func (m *BucketHeader) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Tag struct {
	Entry                []uint64 `protobuf:"varint,1,rep,packed,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_proio_85dbe7ee00e34bef, []int{1}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetEntry() []uint64 {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Any struct {
	Type                 uint64   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Any) Reset()         { *m = Any{} }
func (m *Any) String() string { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()    {}
func (*Any) Descriptor() ([]byte, []int) {
	return fileDescriptor_proio_85dbe7ee00e34bef, []int{2}
}
func (m *Any) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Any) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Any.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Any) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Any.Merge(dst, src)
}
func (m *Any) XXX_Size() int {
	return m.Size()
}
func (m *Any) XXX_DiscardUnknown() {
	xxx_messageInfo_Any.DiscardUnknown(m)
}

var xxx_messageInfo_Any proto.InternalMessageInfo

func (m *Any) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Any) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Event struct {
	Tag                  map[string]*Tag   `protobuf:"bytes,1,rep,name=tag" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NEntries             uint64            `protobuf:"varint,2,opt,name=nEntries,proto3" json:"nEntries,omitempty"`
	Entry                map[uint64]*Any   `protobuf:"bytes,3,rep,name=entry" json:"entry,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NTypes               uint64            `protobuf:"varint,4,opt,name=nTypes,proto3" json:"nTypes,omitempty"`
	Type                 map[uint64]string `protobuf:"bytes,5,rep,name=type" json:"type,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_proio_85dbe7ee00e34bef, []int{3}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTag() map[string]*Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Event) GetNEntries() uint64 {
	if m != nil {
		return m.NEntries
	}
	return 0
}

func (m *Event) GetEntry() map[uint64]*Any {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *Event) GetNTypes() uint64 {
	if m != nil {
		return m.NTypes
	}
	return 0
}

func (m *Event) GetType() map[uint64]string {
	if m != nil {
		return m.Type
	}
	return nil
}

func init() {
	proto.RegisterType((*BucketHeader)(nil), "proto.BucketHeader")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.BucketHeader.MetadataEntry")
	proto.RegisterType((*Tag)(nil), "proto.Tag")
	proto.RegisterType((*Any)(nil), "proto.Any")
	proto.RegisterType((*Event)(nil), "proto.Event")
	proto.RegisterMapType((map[uint64]*Any)(nil), "proto.Event.EntryEntry")
	proto.RegisterMapType((map[string]*Tag)(nil), "proto.Event.TagEntry")
	proto.RegisterMapType((map[uint64]string)(nil), "proto.Event.TypeEntry")
	proto.RegisterEnum("proto.BucketHeader_CompType", BucketHeader_CompType_name, BucketHeader_CompType_value)
	proto.RegisterEnum("proto.BucketHeader_BucketType", BucketHeader_BucketType_name, BucketHeader_BucketType_value)
}
func (m *BucketHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NEvents != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NEvents))
	}
	if m.BucketSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.BucketSize))
	}
	if m.Compression != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Compression))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Type))
	}
	if len(m.FileDescriptor) > 0 {
		for _, b := range m.FileDescriptor {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x3a
			i++
			v := m.Metadata[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + byteSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entry) > 0 {
		dAtA2 := make([]byte, len(m.Entry)*10)
		var j1 int
		for _, num := range m.Entry {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProio(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Type))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		for k, _ := range m.Tag {
			dAtA[i] = 0xa
			i++
			v := m.Tag[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.NEntries != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NEntries))
	}
	if len(m.Entry) > 0 {
		for k, _ := range m.Entry {
			dAtA[i] = 0x1a
			i++
			v := m.Entry[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + sovProio(uint64(k)) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProio(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if m.NTypes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NTypes))
	}
	if len(m.Type) > 0 {
		for k, _ := range m.Type {
			dAtA[i] = 0x2a
			i++
			v := m.Type[k]
			mapSize := 1 + sovProio(uint64(k)) + 1 + len(v) + sovProio(uint64(len(v)))
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProio(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintProio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BucketHeader) Size() (n int) {
	var l int
	_ = l
	if m.NEvents != 0 {
		n += 1 + sovProio(uint64(m.NEvents))
	}
	if m.BucketSize != 0 {
		n += 1 + sovProio(uint64(m.BucketSize))
	}
	if m.Compression != 0 {
		n += 1 + sovProio(uint64(m.Compression))
	}
	if m.Type != 0 {
		n += 1 + sovProio(uint64(m.Type))
	}
	if len(m.FileDescriptor) > 0 {
		for _, b := range m.FileDescriptor {
			l = len(b)
			n += 1 + l + sovProio(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	if len(m.Entry) > 0 {
		l = 0
		for _, e := range m.Entry {
			l += sovProio(uint64(e))
		}
		n += 1 + sovProio(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Any) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovProio(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if len(m.Tag) > 0 {
		for k, v := range m.Tag {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.NEntries != 0 {
		n += 1 + sovProio(uint64(m.NEntries))
	}
	if len(m.Entry) > 0 {
		for k, v := range m.Entry {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + sovProio(uint64(k)) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.NTypes != 0 {
		n += 1 + sovProio(uint64(m.NTypes))
	}
	if len(m.Type) > 0 {
		for k, v := range m.Type {
			_ = k
			_ = v
			mapEntrySize := 1 + sovProio(uint64(k)) + 1 + len(v) + sovProio(uint64(len(v)))
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProio(x uint64) (n int) {
	return sovProio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NEvents", wireType)
			}
			m.NEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NEvents |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= (BucketHeader_CompType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (BucketHeader_BucketType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileDescriptor = append(m.FileDescriptor, make([]byte, postIndex-iNdEx))
			copy(m.FileDescriptor[len(m.FileDescriptor)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthProio
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Entry = append(m.Entry, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Entry = append(m.Entry, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = make(map[string]*Tag)
			}
			var mapkey string
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tag[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NEntries", wireType)
			}
			m.NEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NEntries |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = make(map[uint64]*Any)
			}
			var mapkey uint64
			var mapvalue *Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Entry[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTypes", wireType)
			}
			m.NTypes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NTypes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Type[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proio/proto/proio.proto", fileDescriptor_proio_85dbe7ee00e34bef) }

var fileDescriptor_proio_85dbe7ee00e34bef = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x9d, 0xa4, 0x4d, 0x4f, 0xeb, 0x12, 0x0e, 0xba, 0x1b, 0xaa, 0x84, 0x18, 0xc4,
	0x0d, 0x82, 0x15, 0xb2, 0x82, 0xa2, 0x28, 0x6c, 0xdd, 0xf8, 0x01, 0xda, 0x4a, 0x36, 0x78, 0xb1,
	0x77, 0xb3, 0xed, 0x58, 0xc2, 0xb6, 0x49, 0x48, 0xb2, 0x0b, 0xf1, 0xd2, 0xa7, 0xf0, 0x2d, 0x7c,
	0x0d, 0x2f, 0x7d, 0x04, 0xa9, 0x2f, 0x22, 0x99, 0x49, 0xba, 0xa9, 0x94, 0xbd, 0x49, 0xce, 0x7f,
	0xe6, 0x9c, 0xdf, 0xf9, 0x1a, 0x38, 0x48, 0xd2, 0x38, 0x8c, 0x9f, 0x24, 0x69, 0x9c, 0x8b, 0x6f,
	0x18, 0x8f, 0x84, 0x8d, 0xaa, 0xf8, 0xd9, 0x3f, 0x29, 0x0c, 0xc6, 0x97, 0xb3, 0x0b, 0x9e, 0xbf,
	0xe7, 0x6c, 0xce, 0x53, 0x34, 0xa0, 0x1b, 0x79, 0x57, 0x3c, 0xca, 0x33, 0x83, 0x58, 0xc4, 0x51,
	0xfc, 0x5a, 0xa2, 0x09, 0x70, 0x2e, 0x3c, 0x4f, 0xc3, 0x6f, 0xdc, 0x68, 0x8b, 0xcb, 0xc6, 0x09,
	0xbe, 0x86, 0xfe, 0x2c, 0x5e, 0x25, 0x29, 0xcf, 0xb2, 0x30, 0x8e, 0x0c, 0x6a, 0x11, 0x67, 0xcf,
	0xbd, 0x27, 0xd3, 0x8d, 0x9a, 0x39, 0x46, 0x6f, 0xe2, 0x55, 0x12, 0x14, 0x09, 0xf7, 0x9b, 0x01,
	0xe8, 0x82, 0x92, 0x17, 0x09, 0x37, 0x14, 0x11, 0x68, 0xee, 0x0a, 0x94, 0x42, 0x84, 0x0a, 0x5f,
	0x7c, 0x08, 0x7b, 0x5f, 0xc3, 0x25, 0x3f, 0xe1, 0xd9, 0x2c, 0x0d, 0x93, 0x3c, 0x4e, 0x0d, 0xd5,
	0xa2, 0xce, 0xc0, 0xff, 0xef, 0x14, 0x5f, 0x81, 0xb6, 0xe2, 0x39, 0x9b, 0xb3, 0x9c, 0x19, 0x5d,
	0x8b, 0x3a, 0x7d, 0xf7, 0xfe, 0x2e, 0xfe, 0xa7, 0xca, 0xc7, 0x8b, 0xf2, 0xb4, 0xf0, 0x37, 0x21,
	0xc3, 0x97, 0x70, 0x6b, 0xeb, 0x0a, 0x75, 0xa0, 0x17, 0xbc, 0x10, 0x13, 0xea, 0xf9, 0xa5, 0x89,
	0xb7, 0x41, 0xbd, 0x62, 0xcb, 0x4b, 0x39, 0x98, 0x81, 0x2f, 0xc5, 0x8b, 0xf6, 0x73, 0x62, 0x1f,
	0x82, 0x56, 0x37, 0x8c, 0x1a, 0x28, 0x93, 0xe9, 0xc4, 0xd3, 0x5b, 0xa5, 0xf5, 0xee, 0xec, 0xc3,
	0x67, 0x9d, 0x60, 0x17, 0xe8, 0xc7, 0xb3, 0xa7, 0x7a, 0xdb, 0x7e, 0x00, 0x70, 0xdd, 0x20, 0x02,
	0x74, 0xbc, 0x2f, 0xde, 0x24, 0x38, 0xd5, 0x5b, 0xa5, 0xfd, 0x76, 0x3a, 0x0d, 0x3c, 0x5f, 0x27,
	0xf6, 0x5d, 0xa0, 0x01, 0x5b, 0x94, 0xf9, 0x78, 0x59, 0x8a, 0x41, 0x2c, 0xea, 0x28, 0xbe, 0x14,
	0xf6, 0x11, 0xd0, 0xe3, 0xa8, 0x40, 0xac, 0x46, 0x29, 0x37, 0x28, 0x47, 0x65, 0x40, 0x37, 0x61,
	0xc5, 0x32, 0x66, 0xf3, 0xaa, 0xc4, 0x5a, 0xda, 0xdf, 0x29, 0xa8, 0x62, 0xc7, 0x78, 0x08, 0x34,
	0x67, 0x0b, 0x81, 0xec, 0xbb, 0x77, 0xaa, 0x09, 0x89, 0xab, 0x51, 0xc0, 0x16, 0x72, 0x2a, 0xa5,
	0x07, 0x0e, 0x41, 0x8b, 0x4a, 0x19, 0xf2, 0xac, 0x7a, 0x09, 0x1b, 0x8d, 0x8f, 0xeb, 0xca, 0xa8,
	0xc0, 0x1c, 0x6c, 0x61, 0x04, 0x43, 0x82, 0xa4, 0x17, 0xee, 0x43, 0x27, 0x2a, 0x1b, 0xce, 0xc4,
	0xe2, 0x15, 0xbf, 0x52, 0xf8, 0xa8, 0xea, 0x41, 0x15, 0x94, 0xfd, 0xed, 0x62, 0x8a, 0x84, 0x4b,
	0x88, 0xf0, 0x19, 0x8e, 0x41, 0xab, 0xeb, 0xdb, 0xb1, 0x1a, 0xab, 0xb9, 0x9a, 0xbe, 0x0b, 0x15,
	0x2a, 0x60, 0x8b, 0xc6, 0x9a, 0x86, 0x27, 0x00, 0xd7, 0xc5, 0x35, 0x29, 0xca, 0x8d, 0x94, 0xe3,
	0xa8, 0x68, 0x52, 0x9e, 0x41, 0x6f, 0x53, 0xdc, 0x0e, 0xc8, 0xd6, 0x2b, 0xe9, 0x35, 0x02, 0xc7,
	0xfa, 0xaf, 0xb5, 0x49, 0x7e, 0xaf, 0x4d, 0xf2, 0x67, 0x6d, 0x92, 0x1f, 0x7f, 0xcd, 0xd6, 0x79,
	0x47, 0x24, 0x38, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0x21, 0x97, 0x62, 0x7d, 0xc3, 0x03, 0x00,
	0x00,
}
